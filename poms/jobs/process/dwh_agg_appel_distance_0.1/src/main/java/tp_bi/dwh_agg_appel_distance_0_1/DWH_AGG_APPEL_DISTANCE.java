// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package tp_bi.dwh_agg_appel_distance_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: DWH_AGG_APPEL_DISTANCE Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class DWH_AGG_APPEL_DISTANCE implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(MySQL_TP_BI_Password != null){
				
					this.setProperty("MySQL_TP_BI_Password", MySQL_TP_BI_Password.toString());
				
			}
			
			if(MySQL_TP_BI_Port != null){
				
					this.setProperty("MySQL_TP_BI_Port", MySQL_TP_BI_Port.toString());
				
			}
			
			if(MySQL_TP_BI_Login != null){
				
					this.setProperty("MySQL_TP_BI_Login", MySQL_TP_BI_Login.toString());
				
			}
			
			if(MySQL_TP_BI_Server != null){
				
					this.setProperty("MySQL_TP_BI_Server", MySQL_TP_BI_Server.toString());
				
			}
			
			if(MySQL_TP_BI_AdditionalParams != null){
				
					this.setProperty("MySQL_TP_BI_AdditionalParams", MySQL_TP_BI_AdditionalParams.toString());
				
			}
			
			if(MySQL_TP_BI_Database != null){
				
					this.setProperty("MySQL_TP_BI_Database", MySQL_TP_BI_Database.toString());
				
			}
			
		}

public java.lang.String MySQL_TP_BI_Password;
public java.lang.String getMySQL_TP_BI_Password(){
	return this.MySQL_TP_BI_Password;
}
public String MySQL_TP_BI_Port;
public String getMySQL_TP_BI_Port(){
	return this.MySQL_TP_BI_Port;
}
public String MySQL_TP_BI_Login;
public String getMySQL_TP_BI_Login(){
	return this.MySQL_TP_BI_Login;
}
public String MySQL_TP_BI_Server;
public String getMySQL_TP_BI_Server(){
	return this.MySQL_TP_BI_Server;
}
public String MySQL_TP_BI_AdditionalParams;
public String getMySQL_TP_BI_AdditionalParams(){
	return this.MySQL_TP_BI_AdditionalParams;
}
public String MySQL_TP_BI_Database;
public String getMySQL_TP_BI_Database(){
	return this.MySQL_TP_BI_Database;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "DWH_AGG_APPEL_DISTANCE";
	private final String projectName = "TP_BI";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				DWH_AGG_APPEL_DISTANCE.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(DWH_AGG_APPEL_DISTANCE.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_1_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_1_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_1_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	









public static class appel_outStruct implements routines.system.IPersistableRow<appel_outStruct> {
    final static byte[] commonByteArrayLock_TP_BI_DWH_AGG_APPEL_DISTANCE = new byte[0];
    static byte[] commonByteArray_TP_BI_DWH_AGG_APPEL_DISTANCE = new byte[0];

	
			    public String Lib_Distance;

				public String getLib_Distance () {
					return this.Lib_Distance;
				}
				
			    public String Pays;

				public String getPays () {
					return this.Pays;
				}
				
			    public String Mois_Appel;

				public String getMois_Appel () {
					return this.Mois_Appel;
				}
				
			    public String Type_Offre;

				public String getType_Offre () {
					return this.Type_Offre;
				}
				
			    public Integer Id_Direction;

				public Integer getId_Direction () {
					return this.Id_Direction;
				}
				
			    public String Lib_Produit;

				public String getLib_Produit () {
					return this.Lib_Produit;
				}
				
			    public Integer Duree;

				public Integer getDuree () {
					return this.Duree;
				}
				
			    public Integer Nb_Appel;

				public Integer getNb_Appel () {
					return this.Nb_Appel;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TP_BI_DWH_AGG_APPEL_DISTANCE.length) {
				if(length < 1024 && commonByteArray_TP_BI_DWH_AGG_APPEL_DISTANCE.length == 0) {
   					commonByteArray_TP_BI_DWH_AGG_APPEL_DISTANCE = new byte[1024];
				} else {
   					commonByteArray_TP_BI_DWH_AGG_APPEL_DISTANCE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TP_BI_DWH_AGG_APPEL_DISTANCE, 0, length);
			strReturn = new String(commonByteArray_TP_BI_DWH_AGG_APPEL_DISTANCE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TP_BI_DWH_AGG_APPEL_DISTANCE) {

        	try {

        		int length = 0;
		
					this.Lib_Distance = readString(dis);
					
					this.Pays = readString(dis);
					
					this.Mois_Appel = readString(dis);
					
					this.Type_Offre = readString(dis);
					
						this.Id_Direction = readInteger(dis);
					
					this.Lib_Produit = readString(dis);
					
						this.Duree = readInteger(dis);
					
						this.Nb_Appel = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Lib_Distance,dos);
					
					// String
				
						writeString(this.Pays,dos);
					
					// String
				
						writeString(this.Mois_Appel,dos);
					
					// String
				
						writeString(this.Type_Offre,dos);
					
					// Integer
				
						writeInteger(this.Id_Direction,dos);
					
					// String
				
						writeString(this.Lib_Produit,dos);
					
					// Integer
				
						writeInteger(this.Duree,dos);
					
					// Integer
				
						writeInteger(this.Nb_Appel,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Lib_Distance="+Lib_Distance);
		sb.append(",Pays="+Pays);
		sb.append(",Mois_Appel="+Mois_Appel);
		sb.append(",Type_Offre="+Type_Offre);
		sb.append(",Id_Direction="+String.valueOf(Id_Direction));
		sb.append(",Lib_Produit="+Lib_Produit);
		sb.append(",Duree="+String.valueOf(Duree));
		sb.append(",Nb_Appel="+String.valueOf(Nb_Appel));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(appel_outStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_1 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
    final static byte[] commonByteArrayLock_TP_BI_DWH_AGG_APPEL_DISTANCE = new byte[0];
    static byte[] commonByteArray_TP_BI_DWH_AGG_APPEL_DISTANCE = new byte[0];

	
			    public String Lib_Distance;

				public String getLib_Distance () {
					return this.Lib_Distance;
				}
				
			    public String Pays;

				public String getPays () {
					return this.Pays;
				}
				
			    public String Mois_Appel;

				public String getMois_Appel () {
					return this.Mois_Appel;
				}
				
			    public String Type_Offre;

				public String getType_Offre () {
					return this.Type_Offre;
				}
				
			    public Integer Id_Direction;

				public Integer getId_Direction () {
					return this.Id_Direction;
				}
				
			    public String Lib_Produit;

				public String getLib_Produit () {
					return this.Lib_Produit;
				}
				
			    public Integer Duree;

				public Integer getDuree () {
					return this.Duree;
				}
				
			    public Integer Nb_Appel;

				public Integer getNb_Appel () {
					return this.Nb_Appel;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TP_BI_DWH_AGG_APPEL_DISTANCE.length) {
				if(length < 1024 && commonByteArray_TP_BI_DWH_AGG_APPEL_DISTANCE.length == 0) {
   					commonByteArray_TP_BI_DWH_AGG_APPEL_DISTANCE = new byte[1024];
				} else {
   					commonByteArray_TP_BI_DWH_AGG_APPEL_DISTANCE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TP_BI_DWH_AGG_APPEL_DISTANCE, 0, length);
			strReturn = new String(commonByteArray_TP_BI_DWH_AGG_APPEL_DISTANCE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TP_BI_DWH_AGG_APPEL_DISTANCE) {

        	try {

        		int length = 0;
		
					this.Lib_Distance = readString(dis);
					
					this.Pays = readString(dis);
					
					this.Mois_Appel = readString(dis);
					
					this.Type_Offre = readString(dis);
					
						this.Id_Direction = readInteger(dis);
					
					this.Lib_Produit = readString(dis);
					
						this.Duree = readInteger(dis);
					
						this.Nb_Appel = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Lib_Distance,dos);
					
					// String
				
						writeString(this.Pays,dos);
					
					// String
				
						writeString(this.Mois_Appel,dos);
					
					// String
				
						writeString(this.Type_Offre,dos);
					
					// Integer
				
						writeInteger(this.Id_Direction,dos);
					
					// String
				
						writeString(this.Lib_Produit,dos);
					
					// Integer
				
						writeInteger(this.Duree,dos);
					
					// Integer
				
						writeInteger(this.Nb_Appel,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Lib_Distance="+Lib_Distance);
		sb.append(",Pays="+Pays);
		sb.append(",Mois_Appel="+Mois_Appel);
		sb.append(",Type_Offre="+Type_Offre);
		sb.append(",Id_Direction="+String.valueOf(Id_Direction));
		sb.append(",Lib_Produit="+Lib_Produit);
		sb.append(",Duree="+String.valueOf(Duree));
		sb.append(",Nb_Appel="+String.valueOf(Nb_Appel));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class appel_out_javaStruct implements routines.system.IPersistableRow<appel_out_javaStruct> {
    final static byte[] commonByteArrayLock_TP_BI_DWH_AGG_APPEL_DISTANCE = new byte[0];
    static byte[] commonByteArray_TP_BI_DWH_AGG_APPEL_DISTANCE = new byte[0];

	
			    public Integer Id_Produit;

				public Integer getId_Produit () {
					return this.Id_Produit;
				}
				
			    public String Mois_Appel;

				public String getMois_Appel () {
					return this.Mois_Appel;
				}
				
			    public String Type_Offre;

				public String getType_Offre () {
					return this.Type_Offre;
				}
				
			    public Integer Id_Direction;

				public Integer getId_Direction () {
					return this.Id_Direction;
				}
				
			    public String Lib_Distance;

				public String getLib_Distance () {
					return this.Lib_Distance;
				}
				
			    public String Reseau;

				public String getReseau () {
					return this.Reseau;
				}
				
			    public Integer Duree;

				public Integer getDuree () {
					return this.Duree;
				}
				
			    public String Pays;

				public String getPays () {
					return this.Pays;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TP_BI_DWH_AGG_APPEL_DISTANCE.length) {
				if(length < 1024 && commonByteArray_TP_BI_DWH_AGG_APPEL_DISTANCE.length == 0) {
   					commonByteArray_TP_BI_DWH_AGG_APPEL_DISTANCE = new byte[1024];
				} else {
   					commonByteArray_TP_BI_DWH_AGG_APPEL_DISTANCE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TP_BI_DWH_AGG_APPEL_DISTANCE, 0, length);
			strReturn = new String(commonByteArray_TP_BI_DWH_AGG_APPEL_DISTANCE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TP_BI_DWH_AGG_APPEL_DISTANCE) {

        	try {

        		int length = 0;
		
						this.Id_Produit = readInteger(dis);
					
					this.Mois_Appel = readString(dis);
					
					this.Type_Offre = readString(dis);
					
						this.Id_Direction = readInteger(dis);
					
					this.Lib_Distance = readString(dis);
					
					this.Reseau = readString(dis);
					
						this.Duree = readInteger(dis);
					
					this.Pays = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Id_Produit,dos);
					
					// String
				
						writeString(this.Mois_Appel,dos);
					
					// String
				
						writeString(this.Type_Offre,dos);
					
					// Integer
				
						writeInteger(this.Id_Direction,dos);
					
					// String
				
						writeString(this.Lib_Distance,dos);
					
					// String
				
						writeString(this.Reseau,dos);
					
					// Integer
				
						writeInteger(this.Duree,dos);
					
					// String
				
						writeString(this.Pays,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id_Produit="+String.valueOf(Id_Produit));
		sb.append(",Mois_Appel="+Mois_Appel);
		sb.append(",Type_Offre="+Type_Offre);
		sb.append(",Id_Direction="+String.valueOf(Id_Direction));
		sb.append(",Lib_Distance="+Lib_Distance);
		sb.append(",Reseau="+Reseau);
		sb.append(",Duree="+String.valueOf(Duree));
		sb.append(",Pays="+Pays);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(appel_out_javaStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class appel_in_javaStruct implements routines.system.IPersistableRow<appel_in_javaStruct> {
    final static byte[] commonByteArrayLock_TP_BI_DWH_AGG_APPEL_DISTANCE = new byte[0];
    static byte[] commonByteArray_TP_BI_DWH_AGG_APPEL_DISTANCE = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int Id_Client;

				public int getId_Client () {
					return this.Id_Client;
				}
				
			    public java.util.Date Date_appel;

				public java.util.Date getDate_appel () {
					return this.Date_appel;
				}
				
			    public String Heure_appel;

				public String getHeure_appel () {
					return this.Heure_appel;
				}
				
			    public String Lib_Offre;

				public String getLib_Offre () {
					return this.Lib_Offre;
				}
				
			    public String Type_Offre;

				public String getType_Offre () {
					return this.Type_Offre;
				}
				
			    public String No_appelant;

				public String getNo_appelant () {
					return this.No_appelant;
				}
				
			    public String No_appele;

				public String getNo_appele () {
					return this.No_appele;
				}
				
			    public Integer Id_Direction;

				public Integer getId_Direction () {
					return this.Id_Direction;
				}
				
			    public Integer Id_Produit;

				public Integer getId_Produit () {
					return this.Id_Produit;
				}
				
			    public String Lib_Produit;

				public String getLib_Produit () {
					return this.Lib_Produit;
				}
				
			    public Integer Id_Distance;

				public Integer getId_Distance () {
					return this.Id_Distance;
				}
				
			    public String Lib_Distance;

				public String getLib_Distance () {
					return this.Lib_Distance;
				}
				
			    public String Reseau;

				public String getReseau () {
					return this.Reseau;
				}
				
			    public Integer Duree;

				public Integer getDuree () {
					return this.Duree;
				}
				
			    public String Pays;

				public String getPays () {
					return this.Pays;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.Id_Client;
						
						result = prime * result + ((this.Date_appel == null) ? 0 : this.Date_appel.hashCode());
					
						result = prime * result + ((this.Heure_appel == null) ? 0 : this.Heure_appel.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final appel_in_javaStruct other = (appel_in_javaStruct) obj;
		
						if (this.Id_Client != other.Id_Client)
							return false;
					
						if (this.Date_appel == null) {
							if (other.Date_appel != null)
								return false;
						
						} else if (!this.Date_appel.equals(other.Date_appel))
						
							return false;
					
						if (this.Heure_appel == null) {
							if (other.Heure_appel != null)
								return false;
						
						} else if (!this.Heure_appel.equals(other.Heure_appel))
						
							return false;
					

		return true;
    }

	public void copyDataTo(appel_in_javaStruct other) {

		other.Id_Client = this.Id_Client;
	            other.Date_appel = this.Date_appel;
	            other.Heure_appel = this.Heure_appel;
	            other.Lib_Offre = this.Lib_Offre;
	            other.Type_Offre = this.Type_Offre;
	            other.No_appelant = this.No_appelant;
	            other.No_appele = this.No_appele;
	            other.Id_Direction = this.Id_Direction;
	            other.Id_Produit = this.Id_Produit;
	            other.Lib_Produit = this.Lib_Produit;
	            other.Id_Distance = this.Id_Distance;
	            other.Lib_Distance = this.Lib_Distance;
	            other.Reseau = this.Reseau;
	            other.Duree = this.Duree;
	            other.Pays = this.Pays;
	            
	}

	public void copyKeysDataTo(appel_in_javaStruct other) {

		other.Id_Client = this.Id_Client;
	            	other.Date_appel = this.Date_appel;
	            	other.Heure_appel = this.Heure_appel;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TP_BI_DWH_AGG_APPEL_DISTANCE.length) {
				if(length < 1024 && commonByteArray_TP_BI_DWH_AGG_APPEL_DISTANCE.length == 0) {
   					commonByteArray_TP_BI_DWH_AGG_APPEL_DISTANCE = new byte[1024];
				} else {
   					commonByteArray_TP_BI_DWH_AGG_APPEL_DISTANCE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TP_BI_DWH_AGG_APPEL_DISTANCE, 0, length);
			strReturn = new String(commonByteArray_TP_BI_DWH_AGG_APPEL_DISTANCE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TP_BI_DWH_AGG_APPEL_DISTANCE) {

        	try {

        		int length = 0;
		
			        this.Id_Client = dis.readInt();
					
					this.Date_appel = readDate(dis);
					
					this.Heure_appel = readString(dis);
					
					this.Lib_Offre = readString(dis);
					
					this.Type_Offre = readString(dis);
					
					this.No_appelant = readString(dis);
					
					this.No_appele = readString(dis);
					
						this.Id_Direction = readInteger(dis);
					
						this.Id_Produit = readInteger(dis);
					
					this.Lib_Produit = readString(dis);
					
						this.Id_Distance = readInteger(dis);
					
					this.Lib_Distance = readString(dis);
					
					this.Reseau = readString(dis);
					
						this.Duree = readInteger(dis);
					
					this.Pays = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.Id_Client);
					
					// java.util.Date
				
						writeDate(this.Date_appel,dos);
					
					// String
				
						writeString(this.Heure_appel,dos);
					
					// String
				
						writeString(this.Lib_Offre,dos);
					
					// String
				
						writeString(this.Type_Offre,dos);
					
					// String
				
						writeString(this.No_appelant,dos);
					
					// String
				
						writeString(this.No_appele,dos);
					
					// Integer
				
						writeInteger(this.Id_Direction,dos);
					
					// Integer
				
						writeInteger(this.Id_Produit,dos);
					
					// String
				
						writeString(this.Lib_Produit,dos);
					
					// Integer
				
						writeInteger(this.Id_Distance,dos);
					
					// String
				
						writeString(this.Lib_Distance,dos);
					
					// String
				
						writeString(this.Reseau,dos);
					
					// Integer
				
						writeInteger(this.Duree,dos);
					
					// String
				
						writeString(this.Pays,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id_Client="+String.valueOf(Id_Client));
		sb.append(",Date_appel="+String.valueOf(Date_appel));
		sb.append(",Heure_appel="+Heure_appel);
		sb.append(",Lib_Offre="+Lib_Offre);
		sb.append(",Type_Offre="+Type_Offre);
		sb.append(",No_appelant="+No_appelant);
		sb.append(",No_appele="+No_appele);
		sb.append(",Id_Direction="+String.valueOf(Id_Direction));
		sb.append(",Id_Produit="+String.valueOf(Id_Produit));
		sb.append(",Lib_Produit="+Lib_Produit);
		sb.append(",Id_Distance="+String.valueOf(Id_Distance));
		sb.append(",Lib_Distance="+Lib_Distance);
		sb.append(",Reseau="+Reseau);
		sb.append(",Duree="+String.valueOf(Duree));
		sb.append(",Pays="+Pays);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(appel_in_javaStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Id_Client, other.Id_Client);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.Date_appel, other.Date_appel);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.Heure_appel, other.Heure_appel);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		appel_in_javaStruct appel_in_java = new appel_in_javaStruct();
appel_out_javaStruct appel_out_java = new appel_out_javaStruct();
appel_outStruct appel_out = new appel_outStruct();





	
	/**
	 * [tAggregateRow_1_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGOUT", false);
		start_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"appel_out_java");
					}
				
		int tos_count_tAggregateRow_1_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_1 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_1 utilClass_tAggregateRow_1 = new UtilClass_tAggregateRow_1();

	

	class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				Integer Id_Produit;
    				String Mois_Appel;
    				String Type_Offre;
    				Integer Id_Direction;
    				String Lib_Distance;
    				Integer Duree;
    				String Pays;int count = 0;
       			int Nb_Appel_clmCount = 0;
           			
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.Id_Produit == null) ? 0 : this.Id_Produit.hashCode());
							
							result = prime * result + ((this.Mois_Appel == null) ? 0 : this.Mois_Appel.hashCode());
							
							result = prime * result + ((this.Type_Offre == null) ? 0 : this.Type_Offre.hashCode());
							
							result = prime * result + ((this.Id_Direction == null) ? 0 : this.Id_Direction.hashCode());
							
							result = prime * result + ((this.Lib_Distance == null) ? 0 : this.Lib_Distance.hashCode());
							
							result = prime * result + ((this.Duree == null) ? 0 : this.Duree.hashCode());
							
							result = prime * result + ((this.Pays == null) ? 0 : this.Pays.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;
			
							if (this.Id_Produit == null) {
								if (other.Id_Produit != null) 
									return false;
							} else if (!this.Id_Produit.equals(other.Id_Produit)) 
								return false;
						
							if (this.Mois_Appel == null) {
								if (other.Mois_Appel != null) 
									return false;
							} else if (!this.Mois_Appel.equals(other.Mois_Appel)) 
								return false;
						
							if (this.Type_Offre == null) {
								if (other.Type_Offre != null) 
									return false;
							} else if (!this.Type_Offre.equals(other.Type_Offre)) 
								return false;
						
							if (this.Id_Direction == null) {
								if (other.Id_Direction != null) 
									return false;
							} else if (!this.Id_Direction.equals(other.Id_Direction)) 
								return false;
						
							if (this.Lib_Distance == null) {
								if (other.Lib_Distance != null) 
									return false;
							} else if (!this.Lib_Distance.equals(other.Lib_Distance)) 
								return false;
						
							if (this.Duree == null) {
								if (other.Duree != null) 
									return false;
							} else if (!this.Duree.equals(other.Duree)) 
								return false;
						
							if (this.Pays == null) {
								if (other.Pays != null) 
									return false;
							} else if (!this.Pays.equals(other.Pays)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
	AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
	java.util.Map<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1>();
	

 



/**
 * [tAggregateRow_1_AGGOUT begin ] stop
 */



	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"appel_in_java");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_1 = java.util.Calendar.getInstance();
		    calendar_tDBInput_1.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_1 = calendar_tDBInput_1.getTime();
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.mysql.cj.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = context.MySQL_TP_BI_Login;
				
				
	final String decryptedPassword_tDBInput_1 = context.MySQL_TP_BI_Password; 
				
				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				
				String url_tDBInput_1 = "jdbc:mysql://" + context.MySQL_TP_BI_Server + ":" + context.MySQL_TP_BI_Port + "/" + "dwh" + "?" + context.MySQL_TP_BI_AdditionalParams;
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT \n  `dwh_fait_appel`.`Id_Client`, \n  `dwh_fait_appel`.`Date_appel`, \n  `dwh_fait_appel`.`Heure_appel`, \n  `dwh_fa"
+"it_appel`.`Lib_Offre`, \n  `dwh_fait_appel`.`Type_Offre`, \n  `dwh_fait_appel`.`No_appelant`, \n  `dwh_fait_appel`.`No_appe"
+"le`, \n  `dwh_fait_appel`.`Id_Direction`, \n  `dwh_fait_appel`.`Id_Produit`, \n  `dwh_fait_appel`.`Lib_Produit`, \n  `dwh_fa"
+"it_appel`.`Id_Distance`, \n  `dwh_fait_appel`.`Lib_Distance`, \n  `dwh_fait_appel`.`Reseau`, \n  `dwh_fait_appel`.`Duree`, "
+"\n  `dwh_fait_appel`.`Pays`\nFROM `dwh_fait_appel`";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								appel_in_java.Id_Client = 0;
							} else {
		                          
            appel_in_java.Id_Client = rs_tDBInput_1.getInt(1);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								appel_in_java.Date_appel = null;
							} else {
										
				if(rs_tDBInput_1.getString(2) != null) {
					String dateString_tDBInput_1 = rs_tDBInput_1.getString(2);
					if (!("0000-00-00").equals(dateString_tDBInput_1) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
						appel_in_java.Date_appel = rs_tDBInput_1.getTimestamp(2);
					} else {
						appel_in_java.Date_appel = (java.util.Date) year0_tDBInput_1.clone();
					}
				} else {
					appel_in_java.Date_appel =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								appel_in_java.Heure_appel = null;
							} else {
	                         		
        	appel_in_java.Heure_appel = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								appel_in_java.Lib_Offre = null;
							} else {
	                         		
        	appel_in_java.Lib_Offre = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								appel_in_java.Type_Offre = null;
							} else {
	                         		
        	appel_in_java.Type_Offre = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								appel_in_java.No_appelant = null;
							} else {
	                         		
        	appel_in_java.No_appelant = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								appel_in_java.No_appele = null;
							} else {
	                         		
        	appel_in_java.No_appele = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								appel_in_java.Id_Direction = null;
							} else {
		                          
            appel_in_java.Id_Direction = rs_tDBInput_1.getInt(8);
            if(rs_tDBInput_1.wasNull()){
                    appel_in_java.Id_Direction = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								appel_in_java.Id_Produit = null;
							} else {
		                          
            appel_in_java.Id_Produit = rs_tDBInput_1.getInt(9);
            if(rs_tDBInput_1.wasNull()){
                    appel_in_java.Id_Produit = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								appel_in_java.Lib_Produit = null;
							} else {
	                         		
        	appel_in_java.Lib_Produit = routines.system.JDBCUtil.getString(rs_tDBInput_1, 10, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								appel_in_java.Id_Distance = null;
							} else {
		                          
            appel_in_java.Id_Distance = rs_tDBInput_1.getInt(11);
            if(rs_tDBInput_1.wasNull()){
                    appel_in_java.Id_Distance = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 12) {
								appel_in_java.Lib_Distance = null;
							} else {
	                         		
        	appel_in_java.Lib_Distance = routines.system.JDBCUtil.getString(rs_tDBInput_1, 12, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 13) {
								appel_in_java.Reseau = null;
							} else {
	                         		
        	appel_in_java.Reseau = routines.system.JDBCUtil.getString(rs_tDBInput_1, 13, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 14) {
								appel_in_java.Duree = null;
							} else {
		                          
            appel_in_java.Duree = rs_tDBInput_1.getInt(14);
            if(rs_tDBInput_1.wasNull()){
                    appel_in_java.Duree = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 15) {
								appel_in_java.Pays = null;
							} else {
	                         		
        	appel_in_java.Pays = routines.system.JDBCUtil.getString(rs_tDBInput_1, 15, false);
		                    }
					

 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"appel_in_java");
					}
					

    //Code généré selon les schémas d'entrée et de sortie
appel_out_java.Id_Produit = appel_in_java.Id_Produit;
appel_out_java.Mois_Appel = appel_in_java.Date_appel !=null ? TalendDate.formatDate("MM",appel_in_java.Date_appel) : null;
appel_out_java.Type_Offre = appel_in_java.Type_Offre;
appel_out_java.Id_Direction = appel_in_java.Id_Direction;
appel_out_java.Lib_Distance = appel_in_java.Lib_Distance;
appel_out_java.Reseau = appel_in_java.Reseau;
appel_out_java.Duree = appel_in_java.Duree;
appel_out_java.Pays = appel_in_java.Pays;
    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"appel_out_java");
					}
					
	
operation_finder_tAggregateRow_1.Id_Produit = appel_out_java.Id_Produit;
			operation_finder_tAggregateRow_1.Mois_Appel = appel_out_java.Mois_Appel;
			operation_finder_tAggregateRow_1.Type_Offre = appel_out_java.Type_Offre;
			operation_finder_tAggregateRow_1.Id_Direction = appel_out_java.Id_Direction;
			operation_finder_tAggregateRow_1.Lib_Distance = appel_out_java.Lib_Distance;
			operation_finder_tAggregateRow_1.Duree = appel_out_java.Duree;
			operation_finder_tAggregateRow_1.Pays = appel_out_java.Pays;
			

	operation_finder_tAggregateRow_1.hashCodeDirty = true;
	
	operation_result_tAggregateRow_1 = hash_tAggregateRow_1.get(operation_finder_tAggregateRow_1);

	

	if(operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

		operation_result_tAggregateRow_1.Id_Produit = operation_finder_tAggregateRow_1.Id_Produit;
				operation_result_tAggregateRow_1.Mois_Appel = operation_finder_tAggregateRow_1.Mois_Appel;
				operation_result_tAggregateRow_1.Type_Offre = operation_finder_tAggregateRow_1.Type_Offre;
				operation_result_tAggregateRow_1.Id_Direction = operation_finder_tAggregateRow_1.Id_Direction;
				operation_result_tAggregateRow_1.Lib_Distance = operation_finder_tAggregateRow_1.Lib_Distance;
				operation_result_tAggregateRow_1.Duree = operation_finder_tAggregateRow_1.Duree;
				operation_result_tAggregateRow_1.Pays = operation_finder_tAggregateRow_1.Pays;
				
		
		

		hash_tAggregateRow_1.put(operation_result_tAggregateRow_1, operation_result_tAggregateRow_1);
	
	} // G_OutMain_AggR_001


	
				operation_result_tAggregateRow_1.Nb_Appel_clmCount++;
				operation_result_tAggregateRow_1.count++;
				


 


	tos_count_tAggregateRow_1_AGGOUT++;

/**
 * [tAggregateRow_1_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
		if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
			
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
		


 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"appel_in_java");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());




/**
 * [tJavaRow_1 end ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"appel_out_java");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_1_AGGOUT", true);
end_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGOUT end ] stop
 */


	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"appel_out");
					}
				
		int tos_count_tDBOutput_2 = 0;
		






int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;

int rejectedCount_tDBOutput_2=0;

String tableName_tDBOutput_2 = "dwh_agg_appel_prd";
boolean whetherReject_tDBOutput_2 = false;

java.util.Calendar calendar_tDBOutput_2 = java.util.Calendar.getInstance();
calendar_tDBOutput_2.set(1, 0, 1, 0, 0, 0);
long year1_tDBOutput_2 = calendar_tDBOutput_2.getTime().getTime();
calendar_tDBOutput_2.set(10000, 0, 1, 0, 0, 0);
long year10000_tDBOutput_2 = calendar_tDBOutput_2.getTime().getTime();
long date_tDBOutput_2;

java.sql.Connection conn_tDBOutput_2 = null;
		String dbProperties_tDBOutput_2 = context.MySQL_TP_BI_AdditionalParams;
		String url_tDBOutput_2 = null;
		if(dbProperties_tDBOutput_2 == null || dbProperties_tDBOutput_2.trim().length() == 0) {
			url_tDBOutput_2 = "jdbc:mysql://" + context.MySQL_TP_BI_Server + ":" + context.MySQL_TP_BI_Port + "/" + "dwh" + "?" + "rewriteBatchedStatements=true";
		} else {
			String properties_tDBOutput_2 = context.MySQL_TP_BI_AdditionalParams;
			if (!properties_tDBOutput_2.contains("rewriteBatchedStatements")) {
				properties_tDBOutput_2 += "&rewriteBatchedStatements=true";
			}

			url_tDBOutput_2 = "jdbc:mysql://" + context.MySQL_TP_BI_Server + ":" + context.MySQL_TP_BI_Port + "/" + "dwh" + "?" + properties_tDBOutput_2;
		}
		String driverClass_tDBOutput_2 = "com.mysql.cj.jdbc.Driver";
		
		String dbUser_tDBOutput_2 = context.MySQL_TP_BI_Login;
		

		
	final String decryptedPassword_tDBOutput_2 = context.MySQL_TP_BI_Password; 

		String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;
		java.lang.Class.forName(driverClass_tDBOutput_2);
		
		conn_tDBOutput_2 = java.sql.DriverManager.getConnection(url_tDBOutput_2, dbUser_tDBOutput_2, dbPwd_tDBOutput_2);
		
	
	resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
        conn_tDBOutput_2.setAutoCommit(false);
        int commitEvery_tDBOutput_2 = 10000;
        int commitCounter_tDBOutput_2 = 0;

int count_tDBOutput_2=0;
    	
            try (java.sql.Statement stmtDrop_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
                stmtDrop_tDBOutput_2.execute("DROP TABLE `" + tableName_tDBOutput_2 + "`" );
            }
            try (java.sql.Statement stmtCreate_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
                stmtCreate_tDBOutput_2.execute("CREATE TABLE `" + tableName_tDBOutput_2 + "`(`Lib_Distance` VARCHAR(15)  ,`Pays` VARCHAR(15)  ,`Mois_Appel` VARCHAR(6)  ,`Type_Offre` VARCHAR(8)  ,`Id_Direction` INT(10)  ,`Lib_Produit` VARCHAR(8)  ,`Duree` INT(10)  ,`Nb_Appel` INT(0)  )");
            }

				String insert_tDBOutput_2 = "INSERT INTO `" + "dwh_agg_appel_prd" + "` (`Lib_Distance`,`Pays`,`Mois_Appel`,`Type_Offre`,`Id_Direction`,`Lib_Produit`,`Duree`,`Nb_Appel`) VALUES (?,?,?,?,?,?,?,?)";
		        int batchSize_tDBOutput_2 = 100;
	   			int batchSizeCounter_tDBOutput_2=0;
		            
		        java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
		        resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);


 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGIN", false);
		start_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	
		int tos_count_tAggregateRow_1_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1.values();

globalMap.put("tAggregateRow_1_NB_LINE", values_tAggregateRow_1.size());

for(AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600



 



/**
 * [tAggregateRow_1_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

            				    appel_out.Lib_Distance = aggregated_row_tAggregateRow_1.Lib_Distance;
            				    
            				    appel_out.Pays = aggregated_row_tAggregateRow_1.Pays;
            				    
            				    appel_out.Mois_Appel = aggregated_row_tAggregateRow_1.Mois_Appel;
            				    
            				    appel_out.Type_Offre = aggregated_row_tAggregateRow_1.Type_Offre;
            				    
            				    appel_out.Id_Direction = aggregated_row_tAggregateRow_1.Id_Direction;
            				    
            				    String s_Id_Produit_Lib_Produit_tAggregateRow_1 = String.valueOf(aggregated_row_tAggregateRow_1.Id_Produit);
            				    appel_out.Lib_Produit = s_Id_Produit_Lib_Produit_tAggregateRow_1;
            				    
            				    appel_out.Duree = aggregated_row_tAggregateRow_1.Duree;
            				    appel_out.Nb_Appel = (int) aggregated_row_tAggregateRow_1.count;
	                                	appel_out.Nb_Appel = (int) aggregated_row_tAggregateRow_1.Nb_Appel_clmCount;
	                                	

 


	tos_count_tAggregateRow_1_AGGIN++;

/**
 * [tAggregateRow_1_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"appel_out");
					}
					



        whetherReject_tDBOutput_2 = false;
                            if(appel_out.Lib_Distance == null) {
pstmt_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(1, appel_out.Lib_Distance);
}

                            if(appel_out.Pays == null) {
pstmt_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(2, appel_out.Pays);
}

                            if(appel_out.Mois_Appel == null) {
pstmt_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(3, appel_out.Mois_Appel);
}

                            if(appel_out.Type_Offre == null) {
pstmt_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(4, appel_out.Type_Offre);
}

                            if(appel_out.Id_Direction == null) {
pstmt_tDBOutput_2.setNull(5, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_2.setInt(5, appel_out.Id_Direction);
}

                            if(appel_out.Lib_Produit == null) {
pstmt_tDBOutput_2.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(6, appel_out.Lib_Produit);
}

                            if(appel_out.Duree == null) {
pstmt_tDBOutput_2.setNull(7, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_2.setInt(7, appel_out.Duree);
}

                            if(appel_out.Nb_Appel == null) {
pstmt_tDBOutput_2.setNull(8, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_2.setInt(8, appel_out.Nb_Appel);
}

                    pstmt_tDBOutput_2.addBatch();
                    nb_line_tDBOutput_2++;

						
                      batchSizeCounter_tDBOutput_2++;
                if ( batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2) {
                try {
                        int countSum_tDBOutput_2 = 0;
                        for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
                            countSum_tDBOutput_2 += (countEach_tDBOutput_2 == java.sql.Statement.EXECUTE_FAILED ? 0 : 1);
                        }
                        insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tDBOutput_2 = 0;
                    for(int countEach_tDBOutput_2: e.getUpdateCounts()) {
                        countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
                    }
                    insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
                    System.err.println(e.getMessage());
                }

                batchSizeCounter_tDBOutput_2 = 0;
            }
                commitCounter_tDBOutput_2++;

                if(commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {

                try {
                        int countSum_tDBOutput_2 = 0;
                        for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
                            countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : 1);
                        }
                        insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tDBOutput_2 = 0;
                    for(int countEach_tDBOutput_2: e.getUpdateCounts()) {
                        countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
                    }
                    insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
                    System.err.println(e.getMessage());

                }
                    conn_tDBOutput_2.commit();
                    commitCounter_tDBOutput_2=0;

                }


 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_1_AGGIN", true);
end_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGIN end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



                try {
                		if (batchSizeCounter_tDBOutput_2 != 0) {
							int countSum_tDBOutput_2 = 0;
							
							for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
								countSum_tDBOutput_2 += (countEach_tDBOutput_2 == java.sql.Statement.EXECUTE_FAILED ? 0 : 1);
							}
							
	            	    	
	            	    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
	            	    	
            	    	}

                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tDBOutput_2 = 0;
					for(int countEach_tDBOutput_2: e.getUpdateCounts()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
					
            	    insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
	    	    	
					globalMap.put(currentComponent+"_ERROR_MESSAGE",e.getMessage());
                	System.err.println(e.getMessage());
                	
                }
                batchSizeCounter_tDBOutput_2 = 0;
    		
	

        if(pstmt_tDBOutput_2 != null) {
			
				pstmt_tDBOutput_2.close();
				resourceMap.remove("pstmt_tDBOutput_2");
			
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);
    	if (commitCounter_tDBOutput_2 > 0) {
    		
    		conn_tDBOutput_2.commit();
    		
    	}
    		
		
    	conn_tDBOutput_2 .close();
    	
    	resourceMap.put("finish_tDBOutput_2", true);
    	

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"appel_out");
			  	}
			  	
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_1_AGGIN"
							globalMap.remove("tAggregateRow_1");
						
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_2") == null){
            java.sql.Connection ctn_tDBOutput_2 = null;
            if((ctn_tDBOutput_2 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_2")) != null){
                try {
                    ctn_tDBOutput_2.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_2) {
                    String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :" + sqlEx_tDBOutput_2.getMessage();
                    System.err.println(errorMessage_tDBOutput_2);
                }
            }
        }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final DWH_AGG_APPEL_DISTANCE DWH_AGG_APPEL_DISTANCEClass = new DWH_AGG_APPEL_DISTANCE();

        int exitCode = DWH_AGG_APPEL_DISTANCEClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = DWH_AGG_APPEL_DISTANCE.class.getClassLoader().getResourceAsStream("tp_bi/dwh_agg_appel_distance_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = DWH_AGG_APPEL_DISTANCE.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("MySQL_TP_BI_Password", "id_Password");
                            String pwd_MySQL_TP_BI_Password_value = context.getProperty("MySQL_TP_BI_Password");
                            context.MySQL_TP_BI_Password = null;
                            if(pwd_MySQL_TP_BI_Password_value!=null) {
                                if(context_param.containsKey("MySQL_TP_BI_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.MySQL_TP_BI_Password = pwd_MySQL_TP_BI_Password_value;
                                } else if (!pwd_MySQL_TP_BI_Password_value.isEmpty()) {
                                    try {
                                        context.MySQL_TP_BI_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_MySQL_TP_BI_Password_value);
                                        context.put("MySQL_TP_BI_Password",context.MySQL_TP_BI_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("MySQL_TP_BI_Port", "id_String");
                            context.MySQL_TP_BI_Port=(String) context.getProperty("MySQL_TP_BI_Port");
                        context.setContextType("MySQL_TP_BI_Login", "id_String");
                            context.MySQL_TP_BI_Login=(String) context.getProperty("MySQL_TP_BI_Login");
                        context.setContextType("MySQL_TP_BI_Server", "id_String");
                            context.MySQL_TP_BI_Server=(String) context.getProperty("MySQL_TP_BI_Server");
                        context.setContextType("MySQL_TP_BI_AdditionalParams", "id_String");
                            context.MySQL_TP_BI_AdditionalParams=(String) context.getProperty("MySQL_TP_BI_AdditionalParams");
                        context.setContextType("MySQL_TP_BI_Database", "id_String");
                            context.MySQL_TP_BI_Database=(String) context.getProperty("MySQL_TP_BI_Database");
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("MySQL_TP_BI_Password")) {
                context.MySQL_TP_BI_Password = (java.lang.String) parentContextMap.get("MySQL_TP_BI_Password");
            }if (parentContextMap.containsKey("MySQL_TP_BI_Port")) {
                context.MySQL_TP_BI_Port = (String) parentContextMap.get("MySQL_TP_BI_Port");
            }if (parentContextMap.containsKey("MySQL_TP_BI_Login")) {
                context.MySQL_TP_BI_Login = (String) parentContextMap.get("MySQL_TP_BI_Login");
            }if (parentContextMap.containsKey("MySQL_TP_BI_Server")) {
                context.MySQL_TP_BI_Server = (String) parentContextMap.get("MySQL_TP_BI_Server");
            }if (parentContextMap.containsKey("MySQL_TP_BI_AdditionalParams")) {
                context.MySQL_TP_BI_AdditionalParams = (String) parentContextMap.get("MySQL_TP_BI_AdditionalParams");
            }if (parentContextMap.containsKey("MySQL_TP_BI_Database")) {
                context.MySQL_TP_BI_Database = (String) parentContextMap.get("MySQL_TP_BI_Database");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("MySQL_TP_BI_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

e_tDBInput_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : DWH_AGG_APPEL_DISTANCE");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     97319 characters generated by Talend Open Studio for ESB 
 *     on the 3 November 2023 at 23:37:42 CET
 ************************************************************************************************/