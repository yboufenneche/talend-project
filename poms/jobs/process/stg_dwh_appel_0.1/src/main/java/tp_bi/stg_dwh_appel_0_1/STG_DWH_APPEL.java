// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package tp_bi.stg_dwh_appel_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.TypeOffre;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: STG_DWH_APPEL Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class STG_DWH_APPEL implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(MySQL_TP_BI_Password != null){
				
					this.setProperty("MySQL_TP_BI_Password", MySQL_TP_BI_Password.toString());
				
			}
			
			if(MySQL_TP_BI_Port != null){
				
					this.setProperty("MySQL_TP_BI_Port", MySQL_TP_BI_Port.toString());
				
			}
			
			if(MySQL_TP_BI_Login != null){
				
					this.setProperty("MySQL_TP_BI_Login", MySQL_TP_BI_Login.toString());
				
			}
			
			if(MySQL_TP_BI_Server != null){
				
					this.setProperty("MySQL_TP_BI_Server", MySQL_TP_BI_Server.toString());
				
			}
			
			if(MySQL_TP_BI_AdditionalParams != null){
				
					this.setProperty("MySQL_TP_BI_AdditionalParams", MySQL_TP_BI_AdditionalParams.toString());
				
			}
			
			if(MySQL_TP_BI_Database != null){
				
					this.setProperty("MySQL_TP_BI_Database", MySQL_TP_BI_Database.toString());
				
			}
			
		}

public java.lang.String MySQL_TP_BI_Password;
public java.lang.String getMySQL_TP_BI_Password(){
	return this.MySQL_TP_BI_Password;
}
public String MySQL_TP_BI_Port;
public String getMySQL_TP_BI_Port(){
	return this.MySQL_TP_BI_Port;
}
public String MySQL_TP_BI_Login;
public String getMySQL_TP_BI_Login(){
	return this.MySQL_TP_BI_Login;
}
public String MySQL_TP_BI_Server;
public String getMySQL_TP_BI_Server(){
	return this.MySQL_TP_BI_Server;
}
public String MySQL_TP_BI_AdditionalParams;
public String getMySQL_TP_BI_AdditionalParams(){
	return this.MySQL_TP_BI_AdditionalParams;
}
public String MySQL_TP_BI_Database;
public String getMySQL_TP_BI_Database(){
	return this.MySQL_TP_BI_Database;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "STG_DWH_APPEL";
	private final String projectName = "TP_BI";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				STG_DWH_APPEL.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(STG_DWH_APPEL.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_direction_in_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_produit_in_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_distance_in_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_cleint_in_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	









public static class appel_outStruct implements routines.system.IPersistableRow<appel_outStruct> {
    final static byte[] commonByteArrayLock_TP_BI_STG_DWH_APPEL = new byte[0];
    static byte[] commonByteArray_TP_BI_STG_DWH_APPEL = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int Id_Client;

				public int getId_Client () {
					return this.Id_Client;
				}
				
			    public java.util.Date Date_appel;

				public java.util.Date getDate_appel () {
					return this.Date_appel;
				}
				
			    public String Heure_appel;

				public String getHeure_appel () {
					return this.Heure_appel;
				}
				
			    public String Lib_Offre;

				public String getLib_Offre () {
					return this.Lib_Offre;
				}
				
			    public String Type_Offre;

				public String getType_Offre () {
					return this.Type_Offre;
				}
				
			    public String No_appelant;

				public String getNo_appelant () {
					return this.No_appelant;
				}
				
			    public String No_appele;

				public String getNo_appele () {
					return this.No_appele;
				}
				
			    public Integer Id_Direction;

				public Integer getId_Direction () {
					return this.Id_Direction;
				}
				
			    public Integer Id_Produit;

				public Integer getId_Produit () {
					return this.Id_Produit;
				}
				
			    public String Lib_Produit;

				public String getLib_Produit () {
					return this.Lib_Produit;
				}
				
			    public Integer Id_Distance;

				public Integer getId_Distance () {
					return this.Id_Distance;
				}
				
			    public String Lib_Distance;

				public String getLib_Distance () {
					return this.Lib_Distance;
				}
				
			    public String Reseau;

				public String getReseau () {
					return this.Reseau;
				}
				
			    public Integer Duree;

				public Integer getDuree () {
					return this.Duree;
				}
				
			    public String Pays;

				public String getPays () {
					return this.Pays;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.Id_Client;
						
						result = prime * result + ((this.Date_appel == null) ? 0 : this.Date_appel.hashCode());
					
						result = prime * result + ((this.Heure_appel == null) ? 0 : this.Heure_appel.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final appel_outStruct other = (appel_outStruct) obj;
		
						if (this.Id_Client != other.Id_Client)
							return false;
					
						if (this.Date_appel == null) {
							if (other.Date_appel != null)
								return false;
						
						} else if (!this.Date_appel.equals(other.Date_appel))
						
							return false;
					
						if (this.Heure_appel == null) {
							if (other.Heure_appel != null)
								return false;
						
						} else if (!this.Heure_appel.equals(other.Heure_appel))
						
							return false;
					

		return true;
    }

	public void copyDataTo(appel_outStruct other) {

		other.Id_Client = this.Id_Client;
	            other.Date_appel = this.Date_appel;
	            other.Heure_appel = this.Heure_appel;
	            other.Lib_Offre = this.Lib_Offre;
	            other.Type_Offre = this.Type_Offre;
	            other.No_appelant = this.No_appelant;
	            other.No_appele = this.No_appele;
	            other.Id_Direction = this.Id_Direction;
	            other.Id_Produit = this.Id_Produit;
	            other.Lib_Produit = this.Lib_Produit;
	            other.Id_Distance = this.Id_Distance;
	            other.Lib_Distance = this.Lib_Distance;
	            other.Reseau = this.Reseau;
	            other.Duree = this.Duree;
	            other.Pays = this.Pays;
	            
	}

	public void copyKeysDataTo(appel_outStruct other) {

		other.Id_Client = this.Id_Client;
	            	other.Date_appel = this.Date_appel;
	            	other.Heure_appel = this.Heure_appel;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TP_BI_STG_DWH_APPEL.length) {
				if(length < 1024 && commonByteArray_TP_BI_STG_DWH_APPEL.length == 0) {
   					commonByteArray_TP_BI_STG_DWH_APPEL = new byte[1024];
				} else {
   					commonByteArray_TP_BI_STG_DWH_APPEL = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TP_BI_STG_DWH_APPEL, 0, length);
			strReturn = new String(commonByteArray_TP_BI_STG_DWH_APPEL, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TP_BI_STG_DWH_APPEL) {

        	try {

        		int length = 0;
		
			        this.Id_Client = dis.readInt();
					
					this.Date_appel = readDate(dis);
					
					this.Heure_appel = readString(dis);
					
					this.Lib_Offre = readString(dis);
					
					this.Type_Offre = readString(dis);
					
					this.No_appelant = readString(dis);
					
					this.No_appele = readString(dis);
					
						this.Id_Direction = readInteger(dis);
					
						this.Id_Produit = readInteger(dis);
					
					this.Lib_Produit = readString(dis);
					
						this.Id_Distance = readInteger(dis);
					
					this.Lib_Distance = readString(dis);
					
					this.Reseau = readString(dis);
					
						this.Duree = readInteger(dis);
					
					this.Pays = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.Id_Client);
					
					// java.util.Date
				
						writeDate(this.Date_appel,dos);
					
					// String
				
						writeString(this.Heure_appel,dos);
					
					// String
				
						writeString(this.Lib_Offre,dos);
					
					// String
				
						writeString(this.Type_Offre,dos);
					
					// String
				
						writeString(this.No_appelant,dos);
					
					// String
				
						writeString(this.No_appele,dos);
					
					// Integer
				
						writeInteger(this.Id_Direction,dos);
					
					// Integer
				
						writeInteger(this.Id_Produit,dos);
					
					// String
				
						writeString(this.Lib_Produit,dos);
					
					// Integer
				
						writeInteger(this.Id_Distance,dos);
					
					// String
				
						writeString(this.Lib_Distance,dos);
					
					// String
				
						writeString(this.Reseau,dos);
					
					// Integer
				
						writeInteger(this.Duree,dos);
					
					// String
				
						writeString(this.Pays,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id_Client="+String.valueOf(Id_Client));
		sb.append(",Date_appel="+String.valueOf(Date_appel));
		sb.append(",Heure_appel="+Heure_appel);
		sb.append(",Lib_Offre="+Lib_Offre);
		sb.append(",Type_Offre="+Type_Offre);
		sb.append(",No_appelant="+No_appelant);
		sb.append(",No_appele="+No_appele);
		sb.append(",Id_Direction="+String.valueOf(Id_Direction));
		sb.append(",Id_Produit="+String.valueOf(Id_Produit));
		sb.append(",Lib_Produit="+Lib_Produit);
		sb.append(",Id_Distance="+String.valueOf(Id_Distance));
		sb.append(",Lib_Distance="+Lib_Distance);
		sb.append(",Reseau="+Reseau);
		sb.append(",Duree="+String.valueOf(Duree));
		sb.append(",Pays="+Pays);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(appel_outStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Id_Client, other.Id_Client);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.Date_appel, other.Date_appel);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.Heure_appel, other.Heure_appel);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class appel_inStruct implements routines.system.IPersistableRow<appel_inStruct> {
    final static byte[] commonByteArrayLock_TP_BI_STG_DWH_APPEL = new byte[0];
    static byte[] commonByteArray_TP_BI_STG_DWH_APPEL = new byte[0];

	
			    public int Id_Client;

				public int getId_Client () {
					return this.Id_Client;
				}
				
			    public java.util.Date Date_appel;

				public java.util.Date getDate_appel () {
					return this.Date_appel;
				}
				
			    public String Heure_appel;

				public String getHeure_appel () {
					return this.Heure_appel;
				}
				
			    public String No_appelant;

				public String getNo_appelant () {
					return this.No_appelant;
				}
				
			    public String No_appele;

				public String getNo_appele () {
					return this.No_appele;
				}
				
			    public Integer Id_Direction;

				public Integer getId_Direction () {
					return this.Id_Direction;
				}
				
			    public Integer Id_Produit;

				public Integer getId_Produit () {
					return this.Id_Produit;
				}
				
			    public Integer Id_Distance;

				public Integer getId_Distance () {
					return this.Id_Distance;
				}
				
			    public Integer Duree;

				public Integer getDuree () {
					return this.Duree;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TP_BI_STG_DWH_APPEL.length) {
				if(length < 1024 && commonByteArray_TP_BI_STG_DWH_APPEL.length == 0) {
   					commonByteArray_TP_BI_STG_DWH_APPEL = new byte[1024];
				} else {
   					commonByteArray_TP_BI_STG_DWH_APPEL = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TP_BI_STG_DWH_APPEL, 0, length);
			strReturn = new String(commonByteArray_TP_BI_STG_DWH_APPEL, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TP_BI_STG_DWH_APPEL) {

        	try {

        		int length = 0;
		
			        this.Id_Client = dis.readInt();
					
					this.Date_appel = readDate(dis);
					
					this.Heure_appel = readString(dis);
					
					this.No_appelant = readString(dis);
					
					this.No_appele = readString(dis);
					
						this.Id_Direction = readInteger(dis);
					
						this.Id_Produit = readInteger(dis);
					
						this.Id_Distance = readInteger(dis);
					
						this.Duree = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.Id_Client);
					
					// java.util.Date
				
						writeDate(this.Date_appel,dos);
					
					// String
				
						writeString(this.Heure_appel,dos);
					
					// String
				
						writeString(this.No_appelant,dos);
					
					// String
				
						writeString(this.No_appele,dos);
					
					// Integer
				
						writeInteger(this.Id_Direction,dos);
					
					// Integer
				
						writeInteger(this.Id_Produit,dos);
					
					// Integer
				
						writeInteger(this.Id_Distance,dos);
					
					// Integer
				
						writeInteger(this.Duree,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id_Client="+String.valueOf(Id_Client));
		sb.append(",Date_appel="+String.valueOf(Date_appel));
		sb.append(",Heure_appel="+Heure_appel);
		sb.append(",No_appelant="+No_appelant);
		sb.append(",No_appele="+No_appele);
		sb.append(",Id_Direction="+String.valueOf(Id_Direction));
		sb.append(",Id_Produit="+String.valueOf(Id_Produit));
		sb.append(",Id_Distance="+String.valueOf(Id_Distance));
		sb.append(",Duree="+String.valueOf(Duree));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(appel_inStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_1Struct implements routines.system.IPersistableRow<after_tDBInput_1Struct> {
    final static byte[] commonByteArrayLock_TP_BI_STG_DWH_APPEL = new byte[0];
    static byte[] commonByteArray_TP_BI_STG_DWH_APPEL = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int Id_Client;

				public int getId_Client () {
					return this.Id_Client;
				}
				
			    public java.util.Date Date_appel;

				public java.util.Date getDate_appel () {
					return this.Date_appel;
				}
				
			    public String Heure_appel;

				public String getHeure_appel () {
					return this.Heure_appel;
				}
				
			    public String No_appelant;

				public String getNo_appelant () {
					return this.No_appelant;
				}
				
			    public String No_appele;

				public String getNo_appele () {
					return this.No_appele;
				}
				
			    public Integer Id_Direction;

				public Integer getId_Direction () {
					return this.Id_Direction;
				}
				
			    public Integer Id_Produit;

				public Integer getId_Produit () {
					return this.Id_Produit;
				}
				
			    public Integer Id_Distance;

				public Integer getId_Distance () {
					return this.Id_Distance;
				}
				
			    public Integer Duree;

				public Integer getDuree () {
					return this.Duree;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.Id_Client;
						
						result = prime * result + ((this.Date_appel == null) ? 0 : this.Date_appel.hashCode());
					
						result = prime * result + ((this.Heure_appel == null) ? 0 : this.Heure_appel.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final after_tDBInput_1Struct other = (after_tDBInput_1Struct) obj;
		
						if (this.Id_Client != other.Id_Client)
							return false;
					
						if (this.Date_appel == null) {
							if (other.Date_appel != null)
								return false;
						
						} else if (!this.Date_appel.equals(other.Date_appel))
						
							return false;
					
						if (this.Heure_appel == null) {
							if (other.Heure_appel != null)
								return false;
						
						} else if (!this.Heure_appel.equals(other.Heure_appel))
						
							return false;
					

		return true;
    }

	public void copyDataTo(after_tDBInput_1Struct other) {

		other.Id_Client = this.Id_Client;
	            other.Date_appel = this.Date_appel;
	            other.Heure_appel = this.Heure_appel;
	            other.No_appelant = this.No_appelant;
	            other.No_appele = this.No_appele;
	            other.Id_Direction = this.Id_Direction;
	            other.Id_Produit = this.Id_Produit;
	            other.Id_Distance = this.Id_Distance;
	            other.Duree = this.Duree;
	            
	}

	public void copyKeysDataTo(after_tDBInput_1Struct other) {

		other.Id_Client = this.Id_Client;
	            	other.Date_appel = this.Date_appel;
	            	other.Heure_appel = this.Heure_appel;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TP_BI_STG_DWH_APPEL.length) {
				if(length < 1024 && commonByteArray_TP_BI_STG_DWH_APPEL.length == 0) {
   					commonByteArray_TP_BI_STG_DWH_APPEL = new byte[1024];
				} else {
   					commonByteArray_TP_BI_STG_DWH_APPEL = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TP_BI_STG_DWH_APPEL, 0, length);
			strReturn = new String(commonByteArray_TP_BI_STG_DWH_APPEL, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TP_BI_STG_DWH_APPEL) {

        	try {

        		int length = 0;
		
			        this.Id_Client = dis.readInt();
					
					this.Date_appel = readDate(dis);
					
					this.Heure_appel = readString(dis);
					
					this.No_appelant = readString(dis);
					
					this.No_appele = readString(dis);
					
						this.Id_Direction = readInteger(dis);
					
						this.Id_Produit = readInteger(dis);
					
						this.Id_Distance = readInteger(dis);
					
						this.Duree = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.Id_Client);
					
					// java.util.Date
				
						writeDate(this.Date_appel,dos);
					
					// String
				
						writeString(this.Heure_appel,dos);
					
					// String
				
						writeString(this.No_appelant,dos);
					
					// String
				
						writeString(this.No_appele,dos);
					
					// Integer
				
						writeInteger(this.Id_Direction,dos);
					
					// Integer
				
						writeInteger(this.Id_Produit,dos);
					
					// Integer
				
						writeInteger(this.Id_Distance,dos);
					
					// Integer
				
						writeInteger(this.Duree,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id_Client="+String.valueOf(Id_Client));
		sb.append(",Date_appel="+String.valueOf(Date_appel));
		sb.append(",Heure_appel="+Heure_appel);
		sb.append(",No_appelant="+No_appelant);
		sb.append(",No_appele="+No_appele);
		sb.append(",Id_Direction="+String.valueOf(Id_Direction));
		sb.append(",Id_Produit="+String.valueOf(Id_Produit));
		sb.append(",Id_Distance="+String.valueOf(Id_Distance));
		sb.append(",Duree="+String.valueOf(Duree));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Id_Client, other.Id_Client);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.Date_appel, other.Date_appel);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.Heure_appel, other.Heure_appel);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_3Process(globalMap);
		tDBInput_5Process(globalMap);
		tDBInput_4Process(globalMap);
		tDBInput_6Process(globalMap);

		appel_inStruct appel_in = new appel_inStruct();
appel_outStruct appel_out = new appel_outStruct();





	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"appel_out");
					}
				
		int tos_count_tDBOutput_1 = 0;
		






int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;

int rejectedCount_tDBOutput_1=0;

String tableName_tDBOutput_1 = "dwh_fait_appel";
boolean whetherReject_tDBOutput_1 = false;

java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
calendar_tDBOutput_1.set(1, 0, 1, 0, 0, 0);
long year1_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
calendar_tDBOutput_1.set(10000, 0, 1, 0, 0, 0);
long year10000_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
long date_tDBOutput_1;

java.sql.Connection conn_tDBOutput_1 = null;
		String dbProperties_tDBOutput_1 = context.MySQL_TP_BI_AdditionalParams;
		String url_tDBOutput_1 = null;
		if(dbProperties_tDBOutput_1 == null || dbProperties_tDBOutput_1.trim().length() == 0) {
			url_tDBOutput_1 = "jdbc:mysql://" + context.MySQL_TP_BI_Server + ":" + context.MySQL_TP_BI_Port + "/" + "dwh" + "?" + "rewriteBatchedStatements=true";
		} else {
			String properties_tDBOutput_1 = context.MySQL_TP_BI_AdditionalParams;
			if (!properties_tDBOutput_1.contains("rewriteBatchedStatements")) {
				properties_tDBOutput_1 += "&rewriteBatchedStatements=true";
			}

			url_tDBOutput_1 = "jdbc:mysql://" + context.MySQL_TP_BI_Server + ":" + context.MySQL_TP_BI_Port + "/" + "dwh" + "?" + properties_tDBOutput_1;
		}
		String driverClass_tDBOutput_1 = "com.mysql.cj.jdbc.Driver";
		
		String dbUser_tDBOutput_1 = context.MySQL_TP_BI_Login;
		

		
	final String decryptedPassword_tDBOutput_1 = context.MySQL_TP_BI_Password; 

		String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
		java.lang.Class.forName(driverClass_tDBOutput_1);
		
		conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1, dbPwd_tDBOutput_1);
		
	
	resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
        conn_tDBOutput_1.setAutoCommit(false);
        int commitEvery_tDBOutput_1 = 10000;
        int commitCounter_tDBOutput_1 = 0;

int count_tDBOutput_1=0;
    	
            try (java.sql.Statement stmtDrop_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
                stmtDrop_tDBOutput_1.execute("DROP TABLE `" + tableName_tDBOutput_1 + "`" );
            }
            try (java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
                stmtCreate_tDBOutput_1.execute("CREATE TABLE `" + tableName_tDBOutput_1 + "`(`Id_Client` INT(10)   not null ,`Date_appel` DATE  not null ,`Heure_appel` VARCHAR(5)   not null ,`Lib_Offre` VARCHAR(15)  ,`Type_Offre` VARCHAR(8)  ,`No_appelant` VARCHAR(20)  ,`No_appele` VARCHAR(100)  ,`Id_Direction` INT(10)  ,`Id_Produit` INT(10)  ,`Lib_Produit` VARCHAR(8)  ,`Id_Distance` INT(10)  ,`Lib_Distance` VARCHAR(15)  ,`Reseau` VARCHAR(10)  ,`Duree` INT(10)  ,`Pays` VARCHAR(15)  ,primary key(`Id_Client`,`Date_appel`,`Heure_appel`))");
            }

				String insert_tDBOutput_1 = "INSERT INTO `" + "dwh_fait_appel" + "` (`Id_Client`,`Date_appel`,`Heure_appel`,`Lib_Offre`,`Type_Offre`,`No_appelant`,`No_appele`,`Id_Direction`,`Id_Produit`,`Lib_Produit`,`Id_Distance`,`Lib_Distance`,`Reseau`,`Duree`,`Pays`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		        int batchSize_tDBOutput_1 = 100;
	   			int batchSizeCounter_tDBOutput_1=0;
		            
		        java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
		        resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);


 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"appel_in");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<cleint_inStruct> tHash_Lookup_cleint_in = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<cleint_inStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<cleint_inStruct>) 
					globalMap.get( "tHash_Lookup_cleint_in" ))
					;					
					
	

cleint_inStruct cleint_inHashKey = new cleint_inStruct();
cleint_inStruct cleint_inDefault = new cleint_inStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<direction_inStruct> tHash_Lookup_direction_in = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<direction_inStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<direction_inStruct>) 
					globalMap.get( "tHash_Lookup_direction_in" ))
					;					
					
	

direction_inStruct direction_inHashKey = new direction_inStruct();
direction_inStruct direction_inDefault = new direction_inStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<produit_inStruct> tHash_Lookup_produit_in = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<produit_inStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<produit_inStruct>) 
					globalMap.get( "tHash_Lookup_produit_in" ))
					;					
					
	

produit_inStruct produit_inHashKey = new produit_inStruct();
produit_inStruct produit_inDefault = new produit_inStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<distance_inStruct> tHash_Lookup_distance_in = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<distance_inStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<distance_inStruct>) 
					globalMap.get( "tHash_Lookup_distance_in" ))
					;					
					
	

distance_inStruct distance_inHashKey = new distance_inStruct();
distance_inStruct distance_inDefault = new distance_inStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
	String pays;
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
appel_outStruct appel_out_tmp = new appel_outStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_1 = java.util.Calendar.getInstance();
		    calendar_tDBInput_1.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_1 = calendar_tDBInput_1.getTime();
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.mysql.cj.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = context.MySQL_TP_BI_Login;
				
				
	final String decryptedPassword_tDBInput_1 = context.MySQL_TP_BI_Password; 
				
				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				
				String url_tDBInput_1 = "jdbc:mysql://" + context.MySQL_TP_BI_Server + ":" + context.MySQL_TP_BI_Port + "/" + "stg" + "?" + context.MySQL_TP_BI_AdditionalParams;
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT \n  `stg_faitappel`.`Id_Client`, \n  `stg_faitappel`.`Date_appel`, \n  `stg_faitappel`.`Heure_appel`, \n  `stg_faita"
+"ppel`.`No_appelant`, \n  `stg_faitappel`.`No_appele`, \n  `stg_faitappel`.`Id_Direction`, \n  `stg_faitappel`.`Id_Produit`,"
+" \n  `stg_faitappel`.`Id_Distance`, \n  `stg_faitappel`.`Duree`\nFROM `stg_faitappel`";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								appel_in.Id_Client = 0;
							} else {
		                          
            appel_in.Id_Client = rs_tDBInput_1.getInt(1);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								appel_in.Date_appel = null;
							} else {
										
				if(rs_tDBInput_1.getString(2) != null) {
					String dateString_tDBInput_1 = rs_tDBInput_1.getString(2);
					if (!("0000-00-00").equals(dateString_tDBInput_1) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
						appel_in.Date_appel = rs_tDBInput_1.getTimestamp(2);
					} else {
						appel_in.Date_appel = (java.util.Date) year0_tDBInput_1.clone();
					}
				} else {
					appel_in.Date_appel =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								appel_in.Heure_appel = null;
							} else {
	                         		
        	appel_in.Heure_appel = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								appel_in.No_appelant = null;
							} else {
	                         		
        	appel_in.No_appelant = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								appel_in.No_appele = null;
							} else {
	                         		
        	appel_in.No_appele = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								appel_in.Id_Direction = null;
							} else {
		                          
            appel_in.Id_Direction = rs_tDBInput_1.getInt(6);
            if(rs_tDBInput_1.wasNull()){
                    appel_in.Id_Direction = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								appel_in.Id_Produit = null;
							} else {
		                          
            appel_in.Id_Produit = rs_tDBInput_1.getInt(7);
            if(rs_tDBInput_1.wasNull()){
                    appel_in.Id_Produit = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								appel_in.Id_Distance = null;
							} else {
		                          
            appel_in.Id_Distance = rs_tDBInput_1.getInt(8);
            if(rs_tDBInput_1.wasNull()){
                    appel_in.Id_Distance = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								appel_in.Duree = null;
							} else {
		                          
            appel_in.Duree = rs_tDBInput_1.getInt(9);
            if(rs_tDBInput_1.wasNull()){
                    appel_in.Duree = null;
            }
		                    }
					

 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"appel_in");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "cleint_in" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopcleint_in = false;
       		  	    	
       		  	    	
 							cleint_inStruct cleint_inObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
	                        		    	Object exprKeyValue_cleint_in__Id_Client = appel_in.Id_Client ;
	                        		    	if(exprKeyValue_cleint_in__Id_Client == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_1 = true;
	                        		    	} else {
                        		    			cleint_inHashKey.Id_Client = (int)(Integer) exprKeyValue_cleint_in__Id_Client;
                        		    		}
                        		    		

								
		                        	cleint_inHashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_cleint_in.lookup( cleint_inHashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
								  
								  if(hasCasePrimitiveKeyWithNull_tMap_1 || !tHash_Lookup_cleint_in.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_cleint_in != null && tHash_Lookup_cleint_in.getCount(cleint_inHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'cleint_in' and it contains more one result from keys :  cleint_in.Id_Client = '" + cleint_inHashKey.Id_Client + "'");
								} // G 071
							

							cleint_inStruct cleint_in = null;
                    		  	 
							   
                    		  	 
	       		  	    	cleint_inStruct fromLookup_cleint_in = null;
							cleint_in = cleint_inDefault;
										 
							
								 
							
							
								if (tHash_Lookup_cleint_in !=null && tHash_Lookup_cleint_in.hasNext()) { // G 099
								
							
								
								fromLookup_cleint_in = tHash_Lookup_cleint_in.next();

							
							
								} // G 099
							
							

							if(fromLookup_cleint_in != null) {
								cleint_in = fromLookup_cleint_in;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "direction_in" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopdirection_in = false;
       		  	    	
       		  	    	
 							direction_inStruct direction_inObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
	                        		    	Object exprKeyValue_direction_in__Id_Direction = appel_in.Id_Direction ;
	                        		    	if(exprKeyValue_direction_in__Id_Direction == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_1 = true;
	                        		    	} else {
                        		    			direction_inHashKey.Id_Direction = (int)(Integer) exprKeyValue_direction_in__Id_Direction;
                        		    		}
                        		    		

								
		                        	direction_inHashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_direction_in.lookup( direction_inHashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_direction_in != null && tHash_Lookup_direction_in.getCount(direction_inHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'direction_in' and it contains more one result from keys :  direction_in.Id_Direction = '" + direction_inHashKey.Id_Direction + "'");
								} // G 071
							

							direction_inStruct direction_in = null;
                    		  	 
							   
                    		  	 
	       		  	    	direction_inStruct fromLookup_direction_in = null;
							direction_in = direction_inDefault;
										 
							
								 
							
							
								if (tHash_Lookup_direction_in !=null && tHash_Lookup_direction_in.hasNext()) { // G 099
								
							
								
								fromLookup_direction_in = tHash_Lookup_direction_in.next();

							
							
								} // G 099
							
							

							if(fromLookup_direction_in != null) {
								direction_in = fromLookup_direction_in;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "produit_in" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopproduit_in = false;
       		  	    	
       		  	    	
 							produit_inStruct produit_inObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
	                        		    	Object exprKeyValue_produit_in__Id_Produit = appel_in.Id_Produit ;
	                        		    	if(exprKeyValue_produit_in__Id_Produit == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_1 = true;
	                        		    	} else {
                        		    			produit_inHashKey.Id_Produit = (int)(Integer) exprKeyValue_produit_in__Id_Produit;
                        		    		}
                        		    		

								
		                        	produit_inHashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_produit_in.lookup( produit_inHashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
								  
								  if(hasCasePrimitiveKeyWithNull_tMap_1 || !tHash_Lookup_produit_in.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_produit_in != null && tHash_Lookup_produit_in.getCount(produit_inHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'produit_in' and it contains more one result from keys :  produit_in.Id_Produit = '" + produit_inHashKey.Id_Produit + "'");
								} // G 071
							

							produit_inStruct produit_in = null;
                    		  	 
							   
                    		  	 
	       		  	    	produit_inStruct fromLookup_produit_in = null;
							produit_in = produit_inDefault;
										 
							
								 
							
							
								if (tHash_Lookup_produit_in !=null && tHash_Lookup_produit_in.hasNext()) { // G 099
								
							
								
								fromLookup_produit_in = tHash_Lookup_produit_in.next();

							
							
								} // G 099
							
							

							if(fromLookup_produit_in != null) {
								produit_in = fromLookup_produit_in;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "distance_in" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopdistance_in = false;
       		  	    	
       		  	    	
 							distance_inStruct distance_inObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
	                        		    	Object exprKeyValue_distance_in__Id_Distance = appel_in.Id_Distance ;
	                        		    	if(exprKeyValue_distance_in__Id_Distance == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_1 = true;
	                        		    	} else {
                        		    			distance_inHashKey.Id_Distance = (int)(Integer) exprKeyValue_distance_in__Id_Distance;
                        		    		}
                        		    		

								
		                        	distance_inHashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_distance_in.lookup( distance_inHashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
								  
								  if(hasCasePrimitiveKeyWithNull_tMap_1 || !tHash_Lookup_distance_in.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_distance_in != null && tHash_Lookup_distance_in.getCount(distance_inHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'distance_in' and it contains more one result from keys :  distance_in.Id_Distance = '" + distance_inHashKey.Id_Distance + "'");
								} // G 071
							

							distance_inStruct distance_in = null;
                    		  	 
							   
                    		  	 
	       		  	    	distance_inStruct fromLookup_distance_in = null;
							distance_in = distance_inDefault;
										 
							
								 
							
							
								if (tHash_Lookup_distance_in !=null && tHash_Lookup_distance_in.hasNext()) { // G 099
								
							
								
								fromLookup_distance_in = tHash_Lookup_distance_in.next();

							
							
								} // G 099
							
							

							if(fromLookup_distance_in != null) {
								distance_in = fromLookup_distance_in;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;
Var.pays = TypeOffre.pays(appel_in.Id_Distance, appel_in.No_appelant)  ;// ###############################
        // ###############################
        // # Output tables

appel_out = null;

if(!rejectedInnerJoin_tMap_1 ) {

// # Output table : 'appel_out'
appel_out_tmp.Id_Client = appel_in.Id_Client ;
appel_out_tmp.Date_appel = appel_in.Date_appel ;
appel_out_tmp.Heure_appel = appel_in.Heure_appel ;
appel_out_tmp.Lib_Offre = cleint_in.Lib_Offre ;
appel_out_tmp.Type_Offre = cleint_in.Type_Offre ;
appel_out_tmp.No_appelant = appel_in.No_appelant ;
appel_out_tmp.No_appele = appel_in.No_appele ;
appel_out_tmp.Id_Direction = appel_in.Id_Direction ;
appel_out_tmp.Id_Produit = appel_in.Id_Produit ;
appel_out_tmp.Lib_Produit = produit_in.Lib_Produit ;
appel_out_tmp.Id_Distance = appel_in.Id_Distance ;
appel_out_tmp.Lib_Distance = distance_in.Lib_Distance ;
appel_out_tmp.Reseau = distance_in.Reseau ;
appel_out_tmp.Duree = appel_in.Duree ;
appel_out_tmp.Pays = Var.pays ;
appel_out = appel_out_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "appel_out"
if(appel_out != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"appel_out");
					}
					



        whetherReject_tDBOutput_1 = false;
                            pstmt_tDBOutput_1.setInt(1, appel_out.Id_Client);

                            if(appel_out.Date_appel != null) {
date_tDBOutput_1 = appel_out.Date_appel.getTime();
if(date_tDBOutput_1 < year1_tDBOutput_1 || date_tDBOutput_1 >= year10000_tDBOutput_1) {
pstmt_tDBOutput_1.setString(2, "0000-00-00 00:00:00");
} else {pstmt_tDBOutput_1.setTimestamp(2, new java.sql.Timestamp(date_tDBOutput_1));
}
} else {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.DATE);
}

                            if(appel_out.Heure_appel == null) {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(3, appel_out.Heure_appel);
}

                            if(appel_out.Lib_Offre == null) {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(4, appel_out.Lib_Offre);
}

                            if(appel_out.Type_Offre == null) {
pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(5, appel_out.Type_Offre);
}

                            if(appel_out.No_appelant == null) {
pstmt_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(6, appel_out.No_appelant);
}

                            if(appel_out.No_appele == null) {
pstmt_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(7, appel_out.No_appele);
}

                            if(appel_out.Id_Direction == null) {
pstmt_tDBOutput_1.setNull(8, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(8, appel_out.Id_Direction);
}

                            if(appel_out.Id_Produit == null) {
pstmt_tDBOutput_1.setNull(9, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(9, appel_out.Id_Produit);
}

                            if(appel_out.Lib_Produit == null) {
pstmt_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(10, appel_out.Lib_Produit);
}

                            if(appel_out.Id_Distance == null) {
pstmt_tDBOutput_1.setNull(11, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(11, appel_out.Id_Distance);
}

                            if(appel_out.Lib_Distance == null) {
pstmt_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(12, appel_out.Lib_Distance);
}

                            if(appel_out.Reseau == null) {
pstmt_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(13, appel_out.Reseau);
}

                            if(appel_out.Duree == null) {
pstmt_tDBOutput_1.setNull(14, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(14, appel_out.Duree);
}

                            if(appel_out.Pays == null) {
pstmt_tDBOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(15, appel_out.Pays);
}

                    pstmt_tDBOutput_1.addBatch();
                    nb_line_tDBOutput_1++;

						
                      batchSizeCounter_tDBOutput_1++;
                if ( batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1) {
                try {
                        int countSum_tDBOutput_1 = 0;
                        for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
                            countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED ? 0 : 1);
                        }
                        insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tDBOutput_1 = 0;
                    for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
                        countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
                    }
                    insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
                    System.err.println(e.getMessage());
                }

                batchSizeCounter_tDBOutput_1 = 0;
            }
                commitCounter_tDBOutput_1++;

                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {

                try {
                        int countSum_tDBOutput_1 = 0;
                        for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
                            countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : 1);
                        }
                        insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tDBOutput_1 = 0;
                    for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
                        countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
                    }
                    insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
                    System.err.println(e.getMessage());

                }
                    conn_tDBOutput_1.commit();
                    commitCounter_tDBOutput_1=0;

                }


 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "appel_out"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
		if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
			
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
		


 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_cleint_in != null) {
						tHash_Lookup_cleint_in.endGet();
					}
					globalMap.remove( "tHash_Lookup_cleint_in" );

					
					
				
					if(tHash_Lookup_direction_in != null) {
						tHash_Lookup_direction_in.endGet();
					}
					globalMap.remove( "tHash_Lookup_direction_in" );

					
					
				
					if(tHash_Lookup_produit_in != null) {
						tHash_Lookup_produit_in.endGet();
					}
					globalMap.remove( "tHash_Lookup_produit_in" );

					
					
				
					if(tHash_Lookup_distance_in != null) {
						tHash_Lookup_distance_in.endGet();
					}
					globalMap.remove( "tHash_Lookup_distance_in" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"appel_in");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



                try {
                		if (batchSizeCounter_tDBOutput_1 != 0) {
							int countSum_tDBOutput_1 = 0;
							
							for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
								countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED ? 0 : 1);
							}
							
	            	    	
	            	    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
	            	    	
            	    	}

                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tDBOutput_1 = 0;
					for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					
            	    insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
	    	    	
					globalMap.put(currentComponent+"_ERROR_MESSAGE",e.getMessage());
                	System.err.println(e.getMessage());
                	
                }
                batchSizeCounter_tDBOutput_1 = 0;
    		
	

        if(pstmt_tDBOutput_1 != null) {
			
				pstmt_tDBOutput_1.close();
				resourceMap.remove("pstmt_tDBOutput_1");
			
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);
    	if (commitCounter_tDBOutput_1 > 0) {
    		
    		conn_tDBOutput_1.commit();
    		
    	}
    		
		
    	conn_tDBOutput_1 .close();
    	
    	resourceMap.put("finish_tDBOutput_1", true);
    	

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"appel_out");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_direction_in"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_produit_in"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_distance_in"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_cleint_in"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_1") == null){
            java.sql.Connection ctn_tDBOutput_1 = null;
            if((ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1")) != null){
                try {
                    ctn_tDBOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                    String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
                    System.err.println(errorMessage_tDBOutput_1);
                }
            }
        }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class direction_inStruct implements routines.system.IPersistableComparableLookupRow<direction_inStruct> {
    final static byte[] commonByteArrayLock_TP_BI_STG_DWH_APPEL = new byte[0];
    static byte[] commonByteArray_TP_BI_STG_DWH_APPEL = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int Id_Direction;

				public int getId_Direction () {
					return this.Id_Direction;
				}
				
			    public String Lib_Direction;

				public String getLib_Direction () {
					return this.Lib_Direction;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.Id_Direction;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final direction_inStruct other = (direction_inStruct) obj;
		
						if (this.Id_Direction != other.Id_Direction)
							return false;
					

		return true;
    }

	public void copyDataTo(direction_inStruct other) {

		other.Id_Direction = this.Id_Direction;
	            other.Lib_Direction = this.Lib_Direction;
	            
	}

	public void copyKeysDataTo(direction_inStruct other) {

		other.Id_Direction = this.Id_Direction;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TP_BI_STG_DWH_APPEL) {

        	try {

        		int length = 0;
		
			        this.Id_Direction = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.Id_Direction);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.Lib_Direction = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.Lib_Direction, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id_Direction="+String.valueOf(Id_Direction));
		sb.append(",Lib_Direction="+Lib_Direction);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(direction_inStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Id_Direction, other.Id_Direction);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		direction_inStruct direction_in = new direction_inStruct();




	
	/**
	 * [tAdvancedHash_direction_in begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_direction_in", false);
		start_Hash.put("tAdvancedHash_direction_in", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_direction_in";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"direction_in");
					}
				
		int tos_count_tAdvancedHash_direction_in = 0;
		

			   		// connection name:direction_in
			   		// source node:tDBInput_3 - inputs:(after_tDBInput_1) outputs:(direction_in,direction_in) | target node:tAdvancedHash_direction_in - inputs:(direction_in) outputs:()
			   		// linked node: tMap_1 - inputs:(appel_in,direction_in,produit_in,distance_in,cleint_in) outputs:(appel_out)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_direction_in = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<direction_inStruct> tHash_Lookup_direction_in =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<direction_inStruct>getLookup(matchingModeEnum_direction_in);
	   						   
		   	   	   globalMap.put("tHash_Lookup_direction_in", tHash_Lookup_direction_in);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_direction_in begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_3 = java.util.Calendar.getInstance();
		    calendar_tDBInput_3.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_3 = calendar_tDBInput_3.getTime();
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "com.mysql.cj.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
				String dbUser_tDBInput_3 = context.MySQL_TP_BI_Login;
				
				
	final String decryptedPassword_tDBInput_3 = context.MySQL_TP_BI_Password; 
				
				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;
				
				String url_tDBInput_3 = "jdbc:mysql://" + context.MySQL_TP_BI_Server + ":" + context.MySQL_TP_BI_Port + "/" + "dwh" + "?" + context.MySQL_TP_BI_AdditionalParams;
				
				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3,dbUser_tDBInput_3,dbPwd_tDBInput_3);
		        
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "SELECT \n  `dwh_ref_direction`.`Id_Direction`, \n  `dwh_ref_direction`.`Lib_Direction`\nFROM `dwh_ref_direction`";
			

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								direction_in.Id_Direction = 0;
							} else {
		                          
            direction_in.Id_Direction = rs_tDBInput_3.getInt(1);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								direction_in.Lib_Direction = null;
							} else {
	                         		
        	direction_in.Lib_Direction = routines.system.JDBCUtil.getString(rs_tDBInput_3, 2, false);
		                    }
					

 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_direction_in main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_direction_in";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"direction_in");
					}
					


			   
			   

					direction_inStruct direction_in_HashRow = new direction_inStruct();
		   	   	   
				
				direction_in_HashRow.Id_Direction = direction_in.Id_Direction;
				
				direction_in_HashRow.Lib_Direction = direction_in.Lib_Direction;
				
			tHash_Lookup_direction_in.put(direction_in_HashRow);
			
            




 


	tos_count_tAdvancedHash_direction_in++;

/**
 * [tAdvancedHash_direction_in main ] stop
 */
	
	/**
	 * [tAdvancedHash_direction_in process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_direction_in";

	

 



/**
 * [tAdvancedHash_direction_in process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_direction_in process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_direction_in";

	

 



/**
 * [tAdvancedHash_direction_in process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
		if(conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {
			
			conn_tDBInput_3.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);
		


 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_direction_in end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_direction_in";

	

tHash_Lookup_direction_in.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"direction_in");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_direction_in", true);
end_Hash.put("tAdvancedHash_direction_in", System.currentTimeMillis());




/**
 * [tAdvancedHash_direction_in end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_direction_in finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_direction_in";

	

 



/**
 * [tAdvancedHash_direction_in finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class produit_inStruct implements routines.system.IPersistableComparableLookupRow<produit_inStruct> {
    final static byte[] commonByteArrayLock_TP_BI_STG_DWH_APPEL = new byte[0];
    static byte[] commonByteArray_TP_BI_STG_DWH_APPEL = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int Id_Produit;

				public int getId_Produit () {
					return this.Id_Produit;
				}
				
			    public String Lib_Produit;

				public String getLib_Produit () {
					return this.Lib_Produit;
				}
				
			    public String Desc_Produit;

				public String getDesc_Produit () {
					return this.Desc_Produit;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.Id_Produit;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final produit_inStruct other = (produit_inStruct) obj;
		
						if (this.Id_Produit != other.Id_Produit)
							return false;
					

		return true;
    }

	public void copyDataTo(produit_inStruct other) {

		other.Id_Produit = this.Id_Produit;
	            other.Lib_Produit = this.Lib_Produit;
	            other.Desc_Produit = this.Desc_Produit;
	            
	}

	public void copyKeysDataTo(produit_inStruct other) {

		other.Id_Produit = this.Id_Produit;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TP_BI_STG_DWH_APPEL) {

        	try {

        		int length = 0;
		
			        this.Id_Produit = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.Id_Produit);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.Lib_Produit = readString(dis,ois);
					
						this.Desc_Produit = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.Lib_Produit, dos, oos);
					
						writeString(this.Desc_Produit, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id_Produit="+String.valueOf(Id_Produit));
		sb.append(",Lib_Produit="+Lib_Produit);
		sb.append(",Desc_Produit="+Desc_Produit);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(produit_inStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Id_Produit, other.Id_Produit);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		produit_inStruct produit_in = new produit_inStruct();




	
	/**
	 * [tAdvancedHash_produit_in begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_produit_in", false);
		start_Hash.put("tAdvancedHash_produit_in", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_produit_in";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"produit_in");
					}
				
		int tos_count_tAdvancedHash_produit_in = 0;
		

			   		// connection name:produit_in
			   		// source node:tDBInput_5 - inputs:(after_tDBInput_1) outputs:(produit_in,produit_in) | target node:tAdvancedHash_produit_in - inputs:(produit_in) outputs:()
			   		// linked node: tMap_1 - inputs:(appel_in,direction_in,produit_in,distance_in,cleint_in) outputs:(appel_out)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_produit_in = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<produit_inStruct> tHash_Lookup_produit_in =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<produit_inStruct>getLookup(matchingModeEnum_produit_in);
	   						   
		   	   	   globalMap.put("tHash_Lookup_produit_in", tHash_Lookup_produit_in);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_produit_in begin ] stop
 */



	
	/**
	 * [tDBInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_5", false);
		start_Hash.put("tDBInput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_5";

	
		int tos_count_tDBInput_5 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_5 = java.util.Calendar.getInstance();
		    calendar_tDBInput_5.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_5 = calendar_tDBInput_5.getTime();
		    int nb_line_tDBInput_5 = 0;
		    java.sql.Connection conn_tDBInput_5 = null;
				String driverClass_tDBInput_5 = "com.mysql.cj.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_5 = java.lang.Class.forName(driverClass_tDBInput_5);
				String dbUser_tDBInput_5 = context.MySQL_TP_BI_Login;
				
				
	final String decryptedPassword_tDBInput_5 = context.MySQL_TP_BI_Password; 
				
				String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;
				
				String url_tDBInput_5 = "jdbc:mysql://" + context.MySQL_TP_BI_Server + ":" + context.MySQL_TP_BI_Port + "/" + "dwh" + "?" + context.MySQL_TP_BI_AdditionalParams;
				
				conn_tDBInput_5 = java.sql.DriverManager.getConnection(url_tDBInput_5,dbUser_tDBInput_5,dbPwd_tDBInput_5);
		        
		    
			java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

		    String dbquery_tDBInput_5 = "SELECT \n  `dwh_ref_produit`.`Id_Produit`, \n  `dwh_ref_produit`.`Lib_Produit`, \n  `dwh_ref_produit`.`Desc_Produit`\nFROM "
+"`dwh_ref_produit`";
			

            	globalMap.put("tDBInput_5_QUERY",dbquery_tDBInput_5);
		    java.sql.ResultSet rs_tDBInput_5 = null;

		    try {
		    	rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
		    	int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

		    String tmpContent_tDBInput_5 = null;
		    
		    
		    while (rs_tDBInput_5.next()) {
		        nb_line_tDBInput_5++;
		        
							if(colQtyInRs_tDBInput_5 < 1) {
								produit_in.Id_Produit = 0;
							} else {
		                          
            produit_in.Id_Produit = rs_tDBInput_5.getInt(1);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 2) {
								produit_in.Lib_Produit = null;
							} else {
	                         		
        	produit_in.Lib_Produit = routines.system.JDBCUtil.getString(rs_tDBInput_5, 2, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 3) {
								produit_in.Desc_Produit = null;
							} else {
	                         		
        	produit_in.Desc_Produit = routines.system.JDBCUtil.getString(rs_tDBInput_5, 3, false);
		                    }
					

 



/**
 * [tDBInput_5 begin ] stop
 */
	
	/**
	 * [tDBInput_5 main ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 


	tos_count_tDBInput_5++;

/**
 * [tDBInput_5 main ] stop
 */
	
	/**
	 * [tDBInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_produit_in main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_produit_in";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"produit_in");
					}
					


			   
			   

					produit_inStruct produit_in_HashRow = new produit_inStruct();
		   	   	   
				
				produit_in_HashRow.Id_Produit = produit_in.Id_Produit;
				
				produit_in_HashRow.Lib_Produit = produit_in.Lib_Produit;
				
				produit_in_HashRow.Desc_Produit = produit_in.Desc_Produit;
				
			tHash_Lookup_produit_in.put(produit_in_HashRow);
			
            




 


	tos_count_tAdvancedHash_produit_in++;

/**
 * [tAdvancedHash_produit_in main ] stop
 */
	
	/**
	 * [tAdvancedHash_produit_in process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_produit_in";

	

 



/**
 * [tAdvancedHash_produit_in process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_produit_in process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_produit_in";

	

 



/**
 * [tAdvancedHash_produit_in process_data_end ] stop
 */



	
	/**
	 * [tDBInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_5 end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

	}
}finally{
	if (rs_tDBInput_5 != null) {
		rs_tDBInput_5.close();
	}
	if (stmt_tDBInput_5 != null) {
		stmt_tDBInput_5.close();
	}
		if(conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {
			
			conn_tDBInput_5.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tDBInput_5_NB_LINE",nb_line_tDBInput_5);
		


 

ok_Hash.put("tDBInput_5", true);
end_Hash.put("tDBInput_5", System.currentTimeMillis());




/**
 * [tDBInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_produit_in end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_produit_in";

	

tHash_Lookup_produit_in.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"produit_in");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_produit_in", true);
end_Hash.put("tAdvancedHash_produit_in", System.currentTimeMillis());




/**
 * [tAdvancedHash_produit_in end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_produit_in finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_produit_in";

	

 



/**
 * [tAdvancedHash_produit_in finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class distance_inStruct implements routines.system.IPersistableComparableLookupRow<distance_inStruct> {
    final static byte[] commonByteArrayLock_TP_BI_STG_DWH_APPEL = new byte[0];
    static byte[] commonByteArray_TP_BI_STG_DWH_APPEL = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int Id_Distance;

				public int getId_Distance () {
					return this.Id_Distance;
				}
				
			    public String Lib_Distance;

				public String getLib_Distance () {
					return this.Lib_Distance;
				}
				
			    public String Desc_Distance;

				public String getDesc_Distance () {
					return this.Desc_Distance;
				}
				
			    public String Reseau;

				public String getReseau () {
					return this.Reseau;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.Id_Distance;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final distance_inStruct other = (distance_inStruct) obj;
		
						if (this.Id_Distance != other.Id_Distance)
							return false;
					

		return true;
    }

	public void copyDataTo(distance_inStruct other) {

		other.Id_Distance = this.Id_Distance;
	            other.Lib_Distance = this.Lib_Distance;
	            other.Desc_Distance = this.Desc_Distance;
	            other.Reseau = this.Reseau;
	            
	}

	public void copyKeysDataTo(distance_inStruct other) {

		other.Id_Distance = this.Id_Distance;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TP_BI_STG_DWH_APPEL) {

        	try {

        		int length = 0;
		
			        this.Id_Distance = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.Id_Distance);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.Lib_Distance = readString(dis,ois);
					
						this.Desc_Distance = readString(dis,ois);
					
						this.Reseau = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.Lib_Distance, dos, oos);
					
						writeString(this.Desc_Distance, dos, oos);
					
						writeString(this.Reseau, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id_Distance="+String.valueOf(Id_Distance));
		sb.append(",Lib_Distance="+Lib_Distance);
		sb.append(",Desc_Distance="+Desc_Distance);
		sb.append(",Reseau="+Reseau);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(distance_inStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Id_Distance, other.Id_Distance);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		distance_inStruct distance_in = new distance_inStruct();




	
	/**
	 * [tAdvancedHash_distance_in begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_distance_in", false);
		start_Hash.put("tAdvancedHash_distance_in", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_distance_in";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"distance_in");
					}
				
		int tos_count_tAdvancedHash_distance_in = 0;
		

			   		// connection name:distance_in
			   		// source node:tDBInput_4 - inputs:(after_tDBInput_1) outputs:(distance_in,distance_in) | target node:tAdvancedHash_distance_in - inputs:(distance_in) outputs:()
			   		// linked node: tMap_1 - inputs:(appel_in,direction_in,produit_in,distance_in,cleint_in) outputs:(appel_out)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_distance_in = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<distance_inStruct> tHash_Lookup_distance_in =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<distance_inStruct>getLookup(matchingModeEnum_distance_in);
	   						   
		   	   	   globalMap.put("tHash_Lookup_distance_in", tHash_Lookup_distance_in);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_distance_in begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";

	
		int tos_count_tDBInput_4 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_4 = java.util.Calendar.getInstance();
		    calendar_tDBInput_4.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_4 = calendar_tDBInput_4.getTime();
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "com.mysql.cj.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_4 = java.lang.Class.forName(driverClass_tDBInput_4);
				String dbUser_tDBInput_4 = context.MySQL_TP_BI_Login;
				
				
	final String decryptedPassword_tDBInput_4 = context.MySQL_TP_BI_Password; 
				
				String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;
				
				String url_tDBInput_4 = "jdbc:mysql://" + context.MySQL_TP_BI_Server + ":" + context.MySQL_TP_BI_Port + "/" + "dwh" + "?" + context.MySQL_TP_BI_AdditionalParams;
				
				conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4,dbUser_tDBInput_4,dbPwd_tDBInput_4);
		        
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "SELECT \n  `dwh_ref_distance`.`Id_Distance`, \n  `dwh_ref_distance`.`Lib_Distance`, \n  `dwh_ref_distance`.`Desc_Distance`"
+", \n  `dwh_ref_distance`.`Reseau`\nFROM `dwh_ref_distance`";
			

            	globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);
		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								distance_in.Id_Distance = 0;
							} else {
		                          
            distance_in.Id_Distance = rs_tDBInput_4.getInt(1);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								distance_in.Lib_Distance = null;
							} else {
	                         		
        	distance_in.Lib_Distance = routines.system.JDBCUtil.getString(rs_tDBInput_4, 2, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 3) {
								distance_in.Desc_Distance = null;
							} else {
	                         		
        	distance_in.Desc_Distance = routines.system.JDBCUtil.getString(rs_tDBInput_4, 3, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 4) {
								distance_in.Reseau = null;
							} else {
	                         		
        	distance_in.Reseau = routines.system.JDBCUtil.getString(rs_tDBInput_4, 4, false);
		                    }
					

 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_distance_in main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_distance_in";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"distance_in");
					}
					


			   
			   

					distance_inStruct distance_in_HashRow = new distance_inStruct();
		   	   	   
				
				distance_in_HashRow.Id_Distance = distance_in.Id_Distance;
				
				distance_in_HashRow.Lib_Distance = distance_in.Lib_Distance;
				
				distance_in_HashRow.Desc_Distance = distance_in.Desc_Distance;
				
				distance_in_HashRow.Reseau = distance_in.Reseau;
				
			tHash_Lookup_distance_in.put(distance_in_HashRow);
			
            




 


	tos_count_tAdvancedHash_distance_in++;

/**
 * [tAdvancedHash_distance_in main ] stop
 */
	
	/**
	 * [tAdvancedHash_distance_in process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_distance_in";

	

 



/**
 * [tAdvancedHash_distance_in process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_distance_in process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_distance_in";

	

 



/**
 * [tAdvancedHash_distance_in process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
		if(conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {
			
			conn_tDBInput_4.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);
		


 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_distance_in end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_distance_in";

	

tHash_Lookup_distance_in.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"distance_in");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_distance_in", true);
end_Hash.put("tAdvancedHash_distance_in", System.currentTimeMillis());




/**
 * [tAdvancedHash_distance_in end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_distance_in finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_distance_in";

	

 



/**
 * [tAdvancedHash_distance_in finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class cleint_inStruct implements routines.system.IPersistableComparableLookupRow<cleint_inStruct> {
    final static byte[] commonByteArrayLock_TP_BI_STG_DWH_APPEL = new byte[0];
    static byte[] commonByteArray_TP_BI_STG_DWH_APPEL = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int Id_Client;

				public int getId_Client () {
					return this.Id_Client;
				}
				
			    public String Nom_Client;

				public String getNom_Client () {
					return this.Nom_Client;
				}
				
			    public String Prenom_Client;

				public String getPrenom_Client () {
					return this.Prenom_Client;
				}
				
			    public String Numero;

				public String getNumero () {
					return this.Numero;
				}
				
			    public Integer Id_Offre;

				public Integer getId_Offre () {
					return this.Id_Offre;
				}
				
			    public String Lib_Offre;

				public String getLib_Offre () {
					return this.Lib_Offre;
				}
				
			    public String Type_Offre;

				public String getType_Offre () {
					return this.Type_Offre;
				}
				
			    public java.util.Date Date_abonnement;

				public java.util.Date getDate_abonnement () {
					return this.Date_abonnement;
				}
				
			    public String Trim_abonnement;

				public String getTrim_abonnement () {
					return this.Trim_abonnement;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.Id_Client;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final cleint_inStruct other = (cleint_inStruct) obj;
		
						if (this.Id_Client != other.Id_Client)
							return false;
					

		return true;
    }

	public void copyDataTo(cleint_inStruct other) {

		other.Id_Client = this.Id_Client;
	            other.Nom_Client = this.Nom_Client;
	            other.Prenom_Client = this.Prenom_Client;
	            other.Numero = this.Numero;
	            other.Id_Offre = this.Id_Offre;
	            other.Lib_Offre = this.Lib_Offre;
	            other.Type_Offre = this.Type_Offre;
	            other.Date_abonnement = this.Date_abonnement;
	            other.Trim_abonnement = this.Trim_abonnement;
	            
	}

	public void copyKeysDataTo(cleint_inStruct other) {

		other.Id_Client = this.Id_Client;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TP_BI_STG_DWH_APPEL) {

        	try {

        		int length = 0;
		
			        this.Id_Client = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.Id_Client);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.Nom_Client = readString(dis,ois);
					
						this.Prenom_Client = readString(dis,ois);
					
						this.Numero = readString(dis,ois);
					
						this.Id_Offre = readInteger(dis,ois);
					
						this.Lib_Offre = readString(dis,ois);
					
						this.Type_Offre = readString(dis,ois);
					
						this.Date_abonnement = readDate(dis,ois);
					
						this.Trim_abonnement = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.Nom_Client, dos, oos);
					
						writeString(this.Prenom_Client, dos, oos);
					
						writeString(this.Numero, dos, oos);
					
					writeInteger(this.Id_Offre, dos, oos);
					
						writeString(this.Lib_Offre, dos, oos);
					
						writeString(this.Type_Offre, dos, oos);
					
						writeDate(this.Date_abonnement, dos, oos);
					
						writeString(this.Trim_abonnement, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id_Client="+String.valueOf(Id_Client));
		sb.append(",Nom_Client="+Nom_Client);
		sb.append(",Prenom_Client="+Prenom_Client);
		sb.append(",Numero="+Numero);
		sb.append(",Id_Offre="+String.valueOf(Id_Offre));
		sb.append(",Lib_Offre="+Lib_Offre);
		sb.append(",Type_Offre="+Type_Offre);
		sb.append(",Date_abonnement="+String.valueOf(Date_abonnement));
		sb.append(",Trim_abonnement="+Trim_abonnement);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(cleint_inStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Id_Client, other.Id_Client);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		cleint_inStruct cleint_in = new cleint_inStruct();




	
	/**
	 * [tAdvancedHash_cleint_in begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_cleint_in", false);
		start_Hash.put("tAdvancedHash_cleint_in", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_cleint_in";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"cleint_in");
					}
				
		int tos_count_tAdvancedHash_cleint_in = 0;
		

			   		// connection name:cleint_in
			   		// source node:tDBInput_6 - inputs:(after_tDBInput_1) outputs:(cleint_in,cleint_in) | target node:tAdvancedHash_cleint_in - inputs:(cleint_in) outputs:()
			   		// linked node: tMap_1 - inputs:(appel_in,direction_in,produit_in,distance_in,cleint_in) outputs:(appel_out)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_cleint_in = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<cleint_inStruct> tHash_Lookup_cleint_in =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<cleint_inStruct>getLookup(matchingModeEnum_cleint_in);
	   						   
		   	   	   globalMap.put("tHash_Lookup_cleint_in", tHash_Lookup_cleint_in);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_cleint_in begin ] stop
 */



	
	/**
	 * [tDBInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_6", false);
		start_Hash.put("tDBInput_6", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_6";

	
		int tos_count_tDBInput_6 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_6 = java.util.Calendar.getInstance();
		    calendar_tDBInput_6.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_6 = calendar_tDBInput_6.getTime();
		    int nb_line_tDBInput_6 = 0;
		    java.sql.Connection conn_tDBInput_6 = null;
				String driverClass_tDBInput_6 = "com.mysql.cj.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_6 = java.lang.Class.forName(driverClass_tDBInput_6);
				String dbUser_tDBInput_6 = context.MySQL_TP_BI_Login;
				
				
	final String decryptedPassword_tDBInput_6 = context.MySQL_TP_BI_Password; 
				
				String dbPwd_tDBInput_6 = decryptedPassword_tDBInput_6;
				
				String url_tDBInput_6 = "jdbc:mysql://" + context.MySQL_TP_BI_Server + ":" + context.MySQL_TP_BI_Port + "/" + "dwh" + "?" + context.MySQL_TP_BI_AdditionalParams;
				
				conn_tDBInput_6 = java.sql.DriverManager.getConnection(url_tDBInput_6,dbUser_tDBInput_6,dbPwd_tDBInput_6);
		        
		    
			java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6.createStatement();

		    String dbquery_tDBInput_6 = "SELECT \n  `dwh_ref_client`.`Id_Client`, \n  `dwh_ref_client`.`Nom_Client`, \n  `dwh_ref_client`.`Prenom_Client`, \n  `dwh_"
+"ref_client`.`Numero`, \n  `dwh_ref_client`.`Id_Offre`, \n  `dwh_ref_client`.`Lib_Offre`, \n  `dwh_ref_client`.`Type_Offre`,"
+" \n  `dwh_ref_client`.`Date_abonnement`, \n  `dwh_ref_client`.`Trim_abonnement`\nFROM `dwh_ref_client`";
			

            	globalMap.put("tDBInput_6_QUERY",dbquery_tDBInput_6);
		    java.sql.ResultSet rs_tDBInput_6 = null;

		    try {
		    	rs_tDBInput_6 = stmt_tDBInput_6.executeQuery(dbquery_tDBInput_6);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6.getMetaData();
		    	int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6.getColumnCount();

		    String tmpContent_tDBInput_6 = null;
		    
		    
		    while (rs_tDBInput_6.next()) {
		        nb_line_tDBInput_6++;
		        
							if(colQtyInRs_tDBInput_6 < 1) {
								cleint_in.Id_Client = 0;
							} else {
		                          
            cleint_in.Id_Client = rs_tDBInput_6.getInt(1);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 2) {
								cleint_in.Nom_Client = null;
							} else {
	                         		
        	cleint_in.Nom_Client = routines.system.JDBCUtil.getString(rs_tDBInput_6, 2, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 3) {
								cleint_in.Prenom_Client = null;
							} else {
	                         		
        	cleint_in.Prenom_Client = routines.system.JDBCUtil.getString(rs_tDBInput_6, 3, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 4) {
								cleint_in.Numero = null;
							} else {
	                         		
        	cleint_in.Numero = routines.system.JDBCUtil.getString(rs_tDBInput_6, 4, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 5) {
								cleint_in.Id_Offre = null;
							} else {
		                          
            cleint_in.Id_Offre = rs_tDBInput_6.getInt(5);
            if(rs_tDBInput_6.wasNull()){
                    cleint_in.Id_Offre = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 6) {
								cleint_in.Lib_Offre = null;
							} else {
	                         		
        	cleint_in.Lib_Offre = routines.system.JDBCUtil.getString(rs_tDBInput_6, 6, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 7) {
								cleint_in.Type_Offre = null;
							} else {
	                         		
        	cleint_in.Type_Offre = routines.system.JDBCUtil.getString(rs_tDBInput_6, 7, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 8) {
								cleint_in.Date_abonnement = null;
							} else {
										
				if(rs_tDBInput_6.getString(8) != null) {
					String dateString_tDBInput_6 = rs_tDBInput_6.getString(8);
					if (!("0000-00-00").equals(dateString_tDBInput_6) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_6)) {
						cleint_in.Date_abonnement = rs_tDBInput_6.getTimestamp(8);
					} else {
						cleint_in.Date_abonnement = (java.util.Date) year0_tDBInput_6.clone();
					}
				} else {
					cleint_in.Date_abonnement =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_6 < 9) {
								cleint_in.Trim_abonnement = null;
							} else {
	                         		
        	cleint_in.Trim_abonnement = routines.system.JDBCUtil.getString(rs_tDBInput_6, 9, false);
		                    }
					

 



/**
 * [tDBInput_6 begin ] stop
 */
	
	/**
	 * [tDBInput_6 main ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 


	tos_count_tDBInput_6++;

/**
 * [tDBInput_6 main ] stop
 */
	
	/**
	 * [tDBInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_cleint_in main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_cleint_in";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"cleint_in");
					}
					


			   
			   

					cleint_inStruct cleint_in_HashRow = new cleint_inStruct();
		   	   	   
				
				cleint_in_HashRow.Id_Client = cleint_in.Id_Client;
				
				cleint_in_HashRow.Nom_Client = cleint_in.Nom_Client;
				
				cleint_in_HashRow.Prenom_Client = cleint_in.Prenom_Client;
				
				cleint_in_HashRow.Numero = cleint_in.Numero;
				
				cleint_in_HashRow.Id_Offre = cleint_in.Id_Offre;
				
				cleint_in_HashRow.Lib_Offre = cleint_in.Lib_Offre;
				
				cleint_in_HashRow.Type_Offre = cleint_in.Type_Offre;
				
				cleint_in_HashRow.Date_abonnement = cleint_in.Date_abonnement;
				
				cleint_in_HashRow.Trim_abonnement = cleint_in.Trim_abonnement;
				
			tHash_Lookup_cleint_in.put(cleint_in_HashRow);
			
            




 


	tos_count_tAdvancedHash_cleint_in++;

/**
 * [tAdvancedHash_cleint_in main ] stop
 */
	
	/**
	 * [tAdvancedHash_cleint_in process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_cleint_in";

	

 



/**
 * [tAdvancedHash_cleint_in process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_cleint_in process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_cleint_in";

	

 



/**
 * [tAdvancedHash_cleint_in process_data_end ] stop
 */



	
	/**
	 * [tDBInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_6 end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

	}
}finally{
	if (rs_tDBInput_6 != null) {
		rs_tDBInput_6.close();
	}
	if (stmt_tDBInput_6 != null) {
		stmt_tDBInput_6.close();
	}
		if(conn_tDBInput_6 != null && !conn_tDBInput_6.isClosed()) {
			
			conn_tDBInput_6.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tDBInput_6_NB_LINE",nb_line_tDBInput_6);
		


 

ok_Hash.put("tDBInput_6", true);
end_Hash.put("tDBInput_6", System.currentTimeMillis());




/**
 * [tDBInput_6 end ] stop
 */

	
	/**
	 * [tAdvancedHash_cleint_in end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_cleint_in";

	

tHash_Lookup_cleint_in.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"cleint_in");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_cleint_in", true);
end_Hash.put("tAdvancedHash_cleint_in", System.currentTimeMillis());




/**
 * [tAdvancedHash_cleint_in end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_cleint_in finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_cleint_in";

	

 



/**
 * [tAdvancedHash_cleint_in finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final STG_DWH_APPEL STG_DWH_APPELClass = new STG_DWH_APPEL();

        int exitCode = STG_DWH_APPELClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = STG_DWH_APPEL.class.getClassLoader().getResourceAsStream("tp_bi/stg_dwh_appel_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = STG_DWH_APPEL.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("MySQL_TP_BI_Password", "id_Password");
                            String pwd_MySQL_TP_BI_Password_value = context.getProperty("MySQL_TP_BI_Password");
                            context.MySQL_TP_BI_Password = null;
                            if(pwd_MySQL_TP_BI_Password_value!=null) {
                                if(context_param.containsKey("MySQL_TP_BI_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.MySQL_TP_BI_Password = pwd_MySQL_TP_BI_Password_value;
                                } else if (!pwd_MySQL_TP_BI_Password_value.isEmpty()) {
                                    try {
                                        context.MySQL_TP_BI_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_MySQL_TP_BI_Password_value);
                                        context.put("MySQL_TP_BI_Password",context.MySQL_TP_BI_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("MySQL_TP_BI_Port", "id_String");
                            context.MySQL_TP_BI_Port=(String) context.getProperty("MySQL_TP_BI_Port");
                        context.setContextType("MySQL_TP_BI_Login", "id_String");
                            context.MySQL_TP_BI_Login=(String) context.getProperty("MySQL_TP_BI_Login");
                        context.setContextType("MySQL_TP_BI_Server", "id_String");
                            context.MySQL_TP_BI_Server=(String) context.getProperty("MySQL_TP_BI_Server");
                        context.setContextType("MySQL_TP_BI_AdditionalParams", "id_String");
                            context.MySQL_TP_BI_AdditionalParams=(String) context.getProperty("MySQL_TP_BI_AdditionalParams");
                        context.setContextType("MySQL_TP_BI_Database", "id_String");
                            context.MySQL_TP_BI_Database=(String) context.getProperty("MySQL_TP_BI_Database");
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("MySQL_TP_BI_Password")) {
                context.MySQL_TP_BI_Password = (java.lang.String) parentContextMap.get("MySQL_TP_BI_Password");
            }if (parentContextMap.containsKey("MySQL_TP_BI_Port")) {
                context.MySQL_TP_BI_Port = (String) parentContextMap.get("MySQL_TP_BI_Port");
            }if (parentContextMap.containsKey("MySQL_TP_BI_Login")) {
                context.MySQL_TP_BI_Login = (String) parentContextMap.get("MySQL_TP_BI_Login");
            }if (parentContextMap.containsKey("MySQL_TP_BI_Server")) {
                context.MySQL_TP_BI_Server = (String) parentContextMap.get("MySQL_TP_BI_Server");
            }if (parentContextMap.containsKey("MySQL_TP_BI_AdditionalParams")) {
                context.MySQL_TP_BI_AdditionalParams = (String) parentContextMap.get("MySQL_TP_BI_AdditionalParams");
            }if (parentContextMap.containsKey("MySQL_TP_BI_Database")) {
                context.MySQL_TP_BI_Database = (String) parentContextMap.get("MySQL_TP_BI_Database");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("MySQL_TP_BI_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

e_tDBInput_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : STG_DWH_APPEL");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     161330 characters generated by Talend Open Studio for ESB 
 *     on the 3 November 2023 at 23:37:42 CET
 ************************************************************************************************/